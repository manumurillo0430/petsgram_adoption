[{"/Users/manumurillo/Downloads/petsgram_adoption/client/src/index.js":"1","/Users/manumurillo/Downloads/petsgram_adoption/client/src/reportWebVitals.js":"2","/Users/manumurillo/Downloads/petsgram_adoption/client/src/App.js":"3","/Users/manumurillo/Downloads/petsgram_adoption/client/src/context/AuthContext.jsx":"4","/Users/manumurillo/Downloads/petsgram_adoption/client/src/context/SearchContext.jsx":"5","/Users/manumurillo/Downloads/petsgram_adoption/client/src/pages/AdminDashboard.jsx":"6","/Users/manumurillo/Downloads/petsgram_adoption/client/src/pages/Search.jsx":"7","/Users/manumurillo/Downloads/petsgram_adoption/client/src/pages/Home.jsx":"8","/Users/manumurillo/Downloads/petsgram_adoption/client/src/pages/MyPets.jsx":"9","/Users/manumurillo/Downloads/petsgram_adoption/client/src/pages/ProfileSettings.jsx":"10","/Users/manumurillo/Downloads/petsgram_adoption/client/src/private_routes/PrivateRouteAdmin.jsx":"11","/Users/manumurillo/Downloads/petsgram_adoption/client/src/private_routes/PrivateRouteUser.jsx":"12","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/PetDetailsPage.jsx":"13","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/nav/Sidebar.jsx":"14","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/PetForm.jsx":"15","/Users/manumurillo/Downloads/petsgram_adoption/client/src/utils/api.js":"16","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/GridViewPets.jsx":"17","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/SocialMediaViewPets.jsx":"18","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/DashboardTemple.jsx":"19","/Users/manumurillo/Downloads/petsgram_adoption/client/src/utils/globals.js":"20","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/search/AdvancedSearchFilterCriteria.jsx":"21","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/search/BasicSearchFilterCriteria.jsx":"22","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/search/SearchToggle.jsx":"23","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/profile/ProfileForm.jsx":"24","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/profile/ChangePasswordForm.jsx":"25","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/nav/Header.jsx":"26","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/PetCardFull.jsx":"27","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/form/FormInputField.jsx":"28","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/form/FormTextAreaField.jsx":"29","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/form/FormFileField.jsx":"30","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/form/FormSubmitButtom.jsx":"31","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/form/FormNumberField.jsx":"32","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/form/FormSelectField.jsx":"33","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/form/FormCheckbox.jsx":"34","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/PetCardGrid.jsx":"35","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/DashboardTabs.jsx":"36","/Users/manumurillo/Downloads/petsgram_adoption/client/src/ModeSwitcher.js":"37","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/BarChart.jsx":"38","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/search/FilterSlider.jsx":"39","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/PieChart.jsx":"40","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/Statistics.jsx":"41","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/form/FormPasswordField.jsx":"42","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/nav/Logo.jsx":"43","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/nav/ProfileMenu.jsx":"44","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/search/SearchBar.jsx":"45","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/PetActionsFull.jsx":"46","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/PetTag.jsx":"47","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/PetActionsGrid.jsx":"48","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/registration/RegistrationModal.jsx":"49","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/TableDataPets.jsx":"50","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/TableDataUsers.jsx":"51","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/nav/Logout.jsx":"52","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/PetButtonStatus.jsx":"53","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/PetButtonSM.jsx":"54","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/registration/LoginImage.jsx":"55","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/registration/Resgistration.jsx":"56","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/DashboardTable.jsx":"57","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/registration/Singup.jsx":"58","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/registration/LoginForm.jsx":"59"},{"size":535,"mtime":1678197222816,"results":"60","hashOfConfig":"61"},{"size":362,"mtime":1678197222817,"results":"62","hashOfConfig":"61"},{"size":2665,"mtime":1678197222810,"results":"63","hashOfConfig":"61"},{"size":5259,"mtime":1678197222816,"results":"64","hashOfConfig":"61"},{"size":6187,"mtime":1678197222816,"results":"65","hashOfConfig":"61"},{"size":169,"mtime":1678197222816,"results":"66","hashOfConfig":"61"},{"size":2967,"mtime":1678197222817,"results":"67","hashOfConfig":"61"},{"size":2759,"mtime":1678197222816,"results":"68","hashOfConfig":"61"},{"size":3516,"mtime":1678197222816,"results":"69","hashOfConfig":"61"},{"size":836,"mtime":1678197222817,"results":"70","hashOfConfig":"61"},{"size":350,"mtime":1678197222817,"results":"71","hashOfConfig":"61"},{"size":404,"mtime":1678197222817,"results":"72","hashOfConfig":"61"},{"size":1182,"mtime":1678197222814,"results":"73","hashOfConfig":"61"},{"size":3141,"mtime":1678197222813,"results":"74","hashOfConfig":"61"},{"size":8780,"mtime":1678197222811,"results":"75","hashOfConfig":"61"},{"size":993,"mtime":1679000573787,"results":"76","hashOfConfig":"61"},{"size":1082,"mtime":1678197222813,"results":"77","hashOfConfig":"61"},{"size":901,"mtime":1678197222814,"results":"78","hashOfConfig":"61"},{"size":3914,"mtime":1678197222811,"results":"79","hashOfConfig":"61"},{"size":2394,"mtime":1678197222817,"results":"80","hashOfConfig":"61"},{"size":4915,"mtime":1678197222815,"results":"81","hashOfConfig":"61"},{"size":4740,"mtime":1678197222815,"results":"82","hashOfConfig":"61"},{"size":743,"mtime":1678197222816,"results":"83","hashOfConfig":"61"},{"size":8930,"mtime":1678197222815,"results":"84","hashOfConfig":"61"},{"size":3934,"mtime":1678197222815,"results":"85","hashOfConfig":"61"},{"size":2446,"mtime":1678197222812,"results":"86","hashOfConfig":"61"},{"size":4039,"mtime":1678197222814,"results":"87","hashOfConfig":"61"},{"size":1483,"mtime":1678197222812,"results":"88","hashOfConfig":"61"},{"size":820,"mtime":1678197222812,"results":"89","hashOfConfig":"61"},{"size":2771,"mtime":1678197222812,"results":"90","hashOfConfig":"61"},{"size":426,"mtime":1678197222812,"results":"91","hashOfConfig":"61"},{"size":1264,"mtime":1678197222812,"results":"92","hashOfConfig":"61"},{"size":1225,"mtime":1678197222812,"results":"93","hashOfConfig":"61"},{"size":579,"mtime":1678197222811,"results":"94","hashOfConfig":"61"},{"size":4703,"mtime":1678197222814,"results":"95","hashOfConfig":"61"},{"size":1647,"mtime":1678197222811,"results":"96","hashOfConfig":"61"},{"size":763,"mtime":1678197222810,"results":"97","hashOfConfig":"61"},{"size":1315,"mtime":1678197222810,"results":"98","hashOfConfig":"61"},{"size":2322,"mtime":1678197222815,"results":"99","hashOfConfig":"61"},{"size":1757,"mtime":1678197222811,"results":"100","hashOfConfig":"61"},{"size":529,"mtime":1678197222811,"results":"101","hashOfConfig":"61"},{"size":1515,"mtime":1678197222812,"results":"102","hashOfConfig":"61"},{"size":289,"mtime":1678197222813,"results":"103","hashOfConfig":"61"},{"size":2285,"mtime":1678197222813,"results":"104","hashOfConfig":"61"},{"size":1675,"mtime":1678197222816,"results":"105","hashOfConfig":"61"},{"size":9795,"mtime":1678197222814,"results":"106","hashOfConfig":"61"},{"size":228,"mtime":1678197222814,"results":"107","hashOfConfig":"61"},{"size":8924,"mtime":1678197222814,"results":"108","hashOfConfig":"61"},{"size":999,"mtime":1678197222815,"results":"109","hashOfConfig":"61"},{"size":1857,"mtime":1678197222811,"results":"110","hashOfConfig":"61"},{"size":2497,"mtime":1678197222811,"results":"111","hashOfConfig":"61"},{"size":840,"mtime":1678197222813,"results":"112","hashOfConfig":"61"},{"size":612,"mtime":1678197222814,"results":"113","hashOfConfig":"61"},{"size":514,"mtime":1678197222814,"results":"114","hashOfConfig":"61"},{"size":642,"mtime":1678197222815,"results":"115","hashOfConfig":"61"},{"size":865,"mtime":1678197222815,"results":"116","hashOfConfig":"61"},{"size":2906,"mtime":1678197222811,"results":"117","hashOfConfig":"61"},{"size":3020,"mtime":1678197222815,"results":"118","hashOfConfig":"61"},{"size":2528,"mtime":1678197222815,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"i53899",{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247"},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251"},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255"},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259"},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263"},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","suppressedMessages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","suppressedMessages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276"},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280"},{"filePath":"281","messages":"282","suppressedMessages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","suppressedMessages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287"},{"filePath":"288","messages":"289","suppressedMessages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291"},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295"},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299"},{"filePath":"300","messages":"301","suppressedMessages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303"},{"filePath":"304","messages":"305","suppressedMessages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","suppressedMessages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","suppressedMessages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","suppressedMessages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","suppressedMessages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319"},{"filePath":"320","messages":"321","suppressedMessages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323"},{"filePath":"324","messages":"325","suppressedMessages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/manumurillo/Downloads/petsgram_adoption/client/src/index.js",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/reportWebVitals.js",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/App.js",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/context/AuthContext.jsx",["327"],[],"import { createContext, useContext, useEffect, useState, useReducer } from 'react'\nimport { DeleteReq, GetReq } from '../utils/api'\nimport { PutReq } from '../utils/api'\n\nconst AuthContext = createContext({\n    isLoading: true,\n    isActiveSession: false,\n    currentUser: {},\n    petsUserSaved: [],\n    petsUserAdopted: [],\n    petsUserFostered: [],\n    petsUserLiked: [],\n    verifyUser: () => {},\n    getCurrentUser: () => {},\n    userLikedPet: () => {},\n    userSavedPet: () => {},\n    userUnsavedPet: () => {},\n    getPetsUserLiked: () => {},\n    getPetsUserSaved: () => {},\n})\n\nfunction AuthProvider({ children }) {\n    const [currentUser, setCurrentUser] = useState({})\n    const [petsUserAdopted, setPetsUserAdopted] = useState([])\n    const [petsUserFostered, setPetsUserFostered] = useState([])\n    const [petsUserLiked, setPetsUserLiked] = useState([])\n    const [petsUserSaved, setPetsUserSaved] = useState([])\n    const [isLoading, setIsLoading] = useState(true)\n    const [isActiveSession, setIsActiveSession] = useState(false)\n    const [user_id, setUser_id] = useState(undefined)\n\n    useEffect(() => {\n        const awaitVerifyUser = async () => await verifyUser()\n        awaitVerifyUser() // eslint-disable-next-line\n    }, [])\n\n    useEffect(() => {\n        const awaitGetCurrentUser = async () => {\n            try {\n                const res = await GetReq(`/user/${user_id}`)\n                if (res) {\n                    setCurrentUser(res.user)\n                    setPetsUserAdopted(res.pets.adopted)\n                    setPetsUserFostered(res.pets.fostered)\n                    setPetsUserSaved(res.pets.saved)\n                    setPetsUserLiked(res.pets.liked)\n                    setIsActiveSession(true)\n                }\n            } catch (error) {\n                console.log(error)\n            }\n            setIsLoading(false)\n        }\n        if (user_id) {\n            awaitGetCurrentUser(user_id)\n        }\n    }, [user_id])\n\n    const verifyUser = async () => {\n        try {\n            const res = await GetReq('')\n            console.log(res)\n            if (res.ok) setUser_id(res.user_id)\n        } catch (error) {\n            if (error.response.status === 401) {\n                setIsActiveSession(false)\n            } else console.log(error)\n        }\n    }\n    const getCurrentUser = async (user_id) => {\n        try {\n            const res = await GetReq(`/user/${user_id}`)\n            if (res) {\n                setCurrentUser(res.user)\n                setPetsUserAdopted(res.pets.adopted)\n                setPetsUserFostered(res.pets.fostered)\n                setPetsUserSaved(res.pets.saved)\n                setPetsUserLiked(res.pets.liked)\n                setIsActiveSession(true)\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const userLikedPet = async (pet_id, user_id) => {\n        try {\n            const res = await PutReq(`/user/like/${user_id}`, { pet_id })\n            if (res) {\n                setPetsUserLiked(res.likesUpdated)\n                console.log(petsUserLiked)\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const getPetsUserLiked = async (user_id) => {\n        try {\n            const res = await GetReq(`/user/likes/${user_id}`)\n            if (res) {\n                setPetsUserLiked(res.likesUpdated)\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const userSavedPet = async (user_id, pet_id) => {\n        try {\n            const res = await PutReq(`/user/save/${user_id}`, { pet_id })\n            console.log(res)\n            if (res) {\n                setPetsUserSaved(res.savedPetsIdsListUpdated)\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    const getPetsUserSaved = async (user_id) => {\n        try {\n            const res = await GetReq(`/user/save/${user_id}`)\n            console.log(res)\n            if (res) {\n                setPetsUserSaved(res.savedPets)\n            }\n        } catch (error) {}\n    }\n    const userUnsavedPet = async (user_id, pet_id) => {\n        try {\n            const res = await DeleteReq(`/user/unsave/${user_id}`, { pet_id })\n            console.log(res)\n            if (res) {\n                getCurrentUser(user_id)\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const clearCurrentUser = async () => {\n        setCurrentUser({})\n        setIsActiveSession(false)\n    }\n\n    return (\n        <AuthContext.Provider\n            value={{\n                currentUser,\n                user_id,\n                isLoading,\n                isActiveSession,\n                petsUserAdopted,\n                petsUserFostered,\n                petsUserLiked,\n                petsUserSaved,\n                verifyUser,\n                clearCurrentUser,\n                getCurrentUser,\n                userLikedPet,\n                userSavedPet,\n                userUnsavedPet,\n                getPetsUserLiked,\n                getPetsUserSaved,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    )\n}\n\nexport const useAuthContext = () => useContext(AuthContext)\n\nexport default AuthProvider\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/context/SearchContext.jsx",["328","329","330","331","332"],[],"import { createContext, useContext, useEffect, useState, useReducer } from 'react'\nimport { DeleteReq, GetReq, GetReqQuery, PostReq, PutReq } from '../utils/api'\nimport { Outlet } from 'react-router-dom'\nimport { useAuthContext } from './AuthContext'\n\nconst SearchContext = createContext({\n    typeFilter: 'Type',\n    adpotionStatusFilter: 'Adoption Status',\n    isLoadingPetList: true,\n    usersLikes: [],\n    petsArray: [],\n    filterSelection: {},\n    advancedSearch: false,\n    setAdpotionStatusFilter: () => {},\n    setTypeFilter: () => {},\n    setFilterSelection: () => {},\n    getAllPets: () => {},\n    getFilteredPetsByCriteria: () => {},\n    toggleAdvancedSearch: () => {},\n    deletePet: () => {},\n    updatingAdoptionStatus: () => {},\n    returnPet: () => {},\n    addLike: () => {},\n    getUserLikes: () => {},\n})\n\nfunction SearchProvider() {\n    const { currentUser } = useAuthContext()\n    const [petsArray, setPetsArray] = useState({})\n    const [isLoadingPetList, setIsLoadingPetList] = useState(true)\n    const [advancedSearch, setAdvancedSearch] = useState(true)\n    const [typeFilter, setTypeFilter] = useState('Type')\n    const [adpotionStatusFilter, setAdpotionStatusFilter] = useState('Adoption Status')\n    const [usersLikes, setUsersLikes] = useState([])\n    const [filterSelection, setFilterSelection] = useState({\n        type: '',\n        name: '',\n        adoptionStatus: '',\n        minHeight: '',\n        maxHeight: '',\n        minWeight: '',\n        maxWeight: '',\n    })\n\n    useEffect(() => {\n        const awaitGetPets = async () => await getAllPets()\n        awaitGetPets()\n    }, [])\n\n    useEffect(() => {\n        const awaiToggleAdvancedSearch = () => toggleAdvancedSearch()\n        awaiToggleAdvancedSearch()\n    }, [])\n\n    useEffect(() => {\n        const awaitGetUserLikes = async () => await getUserLikes()\n        awaitGetUserLikes()\n    }, [])\n\n    useEffect(() => {\n        const awaitGetFilteredPetsByCriteria = async () => await getFilteredPetsByCriteria()\n        awaitGetFilteredPetsByCriteria()\n    }, [])\n\n    const getAllPets = async () => {\n        try {\n            const res = await GetReq(`/pet`)\n            if (res) {\n                setIsLoadingPetList(false)\n                setPetsArray(res)\n                return res\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    const getUserLikes = async () => {\n        try {\n            console.log('hols')\n            const res = await GetReq('/')\n            console.log(res, res.user_likes)\n            if (res) {\n                setUsersLikes(res.user_likes)\n                console.log(usersLikes)\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const getFilteredPetsByCriteria = async (userFilterSelection) => {\n        try {\n            const res = await GetReqQuery('/pet/userSearch', userFilterSelection)\n            if (res) {\n                setIsLoadingPetList({})\n                setIsLoadingPetList(false)\n                setPetsArray(res)\n            }\n        } catch (error) {\n            setPetsArray(error)\n        }\n    }\n\n    const toggleAdvancedSearch = () => {\n        setAdvancedSearch(!advancedSearch)\n        setAdpotionStatusFilter('Adoption Status')\n        setTypeFilter('Type')\n        setFilterSelection({ type: '', adoptionStatus: '' })\n        if (filterSelection.adoptionStatus === 'Adoption Status' || filterSelection.adoptionStatus === 'Any') {\n            setFilterSelection({ ...filterSelection, adoptionStatus: '' })\n        }\n        if (filterSelection.type === 'Type' || filterSelection.type === 'Any') filterSelection.type = ''\n    }\n\n    const updatingAdoptionStatus = async (user_id, pet_id, adoptionStatus) => {\n        try {\n            const res = await PostReq(`/pet/adoptionStatus`, { user_id, pet_id, adoptionStatus })\n            console.log(res)\n            if (res) {\n                if (adoptionStatus === 'Fostered') {\n                    currentUser.pets.fostered = res.myFosteredPetsIds\n                }\n                if (adoptionStatus === 'Adopted') {\n                    currentUser.pets.adopted = res.myAdoptedPetsIds\n                }\n            }\n        } catch (error) {}\n    }\n    // /pet/users/:user_id\n\n    const returnPet = async (user_id, pet_id, adoptionStatus) => {\n        console.log(\"I'm about to send the request to the back-end\")\n        try {\n            const res = await DeleteReq('/pet/return', {\n                user_id: user_id,\n                pet_id: pet_id,\n                adoptionStatus: adoptionStatus,\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const addLike = async (user_id, pet_id) => {\n        console.log(\"I'm about to send the request to the back-end\")\n        try {\n            const res = await PostReq(`/pet/like/`, { user_id: user_id, pet_id: pet_id })\n            if (res) {\n                console.log(res)\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const deletePet = async (pet_id) => {\n        console.log(pet_id)\n        try {\n            const res = await DeleteReq(`/pet/${pet_id}/save`, { pet_id: pet_id })\n            if (res) {\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    return (\n        <SearchContext.Provider\n            value={{\n                typeFilter,\n                adpotionStatusFilter,\n                usersLikes,\n                petsArray,\n                isLoadingPetList,\n                advancedSearch,\n                filterSelection,\n                getUserLikes,\n                deletePet,\n                setAdpotionStatusFilter,\n                setTypeFilter,\n                setFilterSelection,\n                getAllPets,\n                getFilteredPetsByCriteria,\n                toggleAdvancedSearch,\n                addLike,\n                updatingAdoptionStatus,\n                returnPet,\n                setUsersLikes,\n            }}\n        >\n            <Outlet />\n        </SearchContext.Provider>\n    )\n}\n\nexport const useSearchContext = () => useContext(SearchContext)\n\nexport default SearchProvider\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/pages/AdminDashboard.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/pages/Search.jsx",["333","334","335","336"],[],"import React, { useState, useEffect } from 'react'\nimport {\n  Box,\n  Flex,\n  Center,\n  Tab,\n  TabList,\n  TabPanel,\n  Tabs,\n  TabPanels,\n  Text,\n} from '@chakra-ui/react'\nimport BasicSearchFilterCriteria from '../components/search/BasicSearchFilterCriteria'\nimport AdvancedSearchFilterCriteria from '../components/search/AdvancedSearchFilterCriteria'\nimport GridViewPets from '../components/pet/GridViewPets'\nimport SocialMediaViewPets from '../components/pet/SocialMediaViewPets'\nimport { GetReq, PostReq } from '../utils/api'\nimport { useSearchContext } from '../context/SearchContext'\nimport { Divider } from 'antd'\nimport SearchToggle from '../components/search/SearchToggle'\n\nexport default function Search() {\n  const {\n    petsArray,\n    isLoadingPetList,\n    advancedSearch,\n    usersLikes,\n    toggleAdvancedSearch,\n  } = useSearchContext()\n\n  const [viewTab, setViewTab] = useState('grid')\n\n  return (\n    <Box w=\"100%\">\n      <Divider style={{ border: 'none', margin: '1rem' }} />\n      <Divider style={{ border: 'none', margin: '1rem' }} />\n      <Flex flexDirection=\"column\">\n        <Center flexDirection=\"column\">\n          <BasicSearchFilterCriteria\n            advancedSearch={advancedSearch}\n            searchResults={petsArray}\n          />\n          {advancedSearch ? (\n            <AdvancedSearchFilterCriteria\n              advancedSearch={advancedSearch}\n              searchResults={petsArray}\n            />\n          ) : null}\n          <SearchToggle\n            toggleAdvancedSearch={toggleAdvancedSearch}\n            advancedSearch={advancedSearch}\n          />\n          <Divider style={{ border: 'none', margin: '0.5rem' }} />\n        </Center>\n\n        {!isLoadingPetList && (\n          <Box>\n            <Tabs isFitted>\n              <Divider style={{ border: 'none', margin: '0.3rem' }} />\n              <TabList>\n                <Tab fontWeight=\"semibold\" onClick={() => setViewTab('grid')}>\n                  GRID VIEW\n                </Tab>\n                <Tab fontWeight=\"semibold\" onClick={() => setViewTab('full')}>\n                  FULL VIEW\n                </Tab>\n              </TabList>\n\n              <TabPanels>\n                <TabPanel>\n                  <GridViewPets\n                    cardSize={25}\n                    usersLikes={usersLikes}\n                    petsArray={petsArray}\n                    viewTab={viewTab}\n                  />\n                </TabPanel>\n                <TabPanel justifyContent=\"center\">\n                  <Center flexDirection=\"column\" w=\"90%\">\n                    <Divider style={{ border: 'none', margin: '0.3rem' }} />\n                    <SocialMediaViewPets\n                      petsArray={petsArray}\n                      usersLikes={usersLikes}\n                      viewTab={viewTab}\n                    />\n                  </Center>\n                </TabPanel>\n              </TabPanels>\n            </Tabs>\n          </Box>\n        )}\n      </Flex>\n    </Box>\n  )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/pages/Home.jsx",["337","338","339","340"],[],"import React from 'react'\nimport { useEffect } from 'react'\nimport { Text, Container, Flex, Image } from '@chakra-ui/react'\n\nimport { GetReq, PostReq } from '../utils/api'\nimport { useAuthContext } from '../context/AuthContext'\nimport axios from 'axios'\n\nexport default function Home() {\n    const { currentUser } = useAuthContext()\n    console.log(currentUser)\n    // useEffect(() => {\n    //     const awaitGetPets = async () => await getAllPets()\n    //     awaitGetPets()\n    // }, [])\n\n    // const getAllPets = async () => {\n    //     try {\n    //         const res = await GetReq('/pet')\n    //         console.log(res)\n    //         if (res) {\n    //             res.map(async (pet) => {\n    //                 try {\n    //                     await PostReq('/pet', pet)\n    //                 } catch (error) {\n    //                     console.error(error)\n    //                 }\n    //             })\n    //         }\n    //     } catch (error) {\n    //         console.error(error)\n    //     }\n    // }\n\n    return (\n        <Container w=\"100%\" h=\"100vh\" bgPosition=\"left\" bgRepeat=\"no-repeat\" bgSize=\"contain\" flexDirection=\"row\">\n            <Flex>\n                <Container>\n                    <Text w=\"50%\">\n                        Welcome to our pet adoption platform, where you can find the perfect furry friend for your\n                        family. Our mission is to connect loving families with abandoned or rescued pets in need of a\n                        forever home. Our platform showcases a wide range of adorable pets, from dogs and cats to\n                        rabbits and birds, all waiting for their chance to find a loving family. We understand that\n                        choosing the right pet can be a challenging and emotional decision. That's why our team is here\n                        to guide you every step of the way, from helping you find the pet that matches your lifestyle\n                        and family, to providing you with all the information and resources you need to ensure a smooth\n                        and successful adoption process. Whether you're a first-time pet owner or an experienced pet\n                        parent, we are here to make your pet adoption experience an enjoyable one. Browse our collection\n                        of furry friends and find the pet that steals your heart today!\n                    </Text>\n                </Container>\n                <Container w=\"50%\">\n                    <Image\n                        src=\"https://res.cloudinary.com/dugudxkyu/image/upload/v1661973596/k58mqitmmtw1racqwxrj.png\"\n                        alt=\"Dan Abramov\"\n                    />\n                </Container>\n            </Flex>\n        </Container>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/pages/MyPets.jsx",["341","342","343","344","345","346","347"],[],"import React, { useState, useEffect } from 'react'\nimport {\n  Box,\n  Tab,\n  TabList,\n  TabPanel,\n  Tabs,\n  TabPanels,\n  Text,\n} from '@chakra-ui/react'\nimport GridViewPets from '../components/pet/GridViewPets'\nimport SocialMediaViewPets from '../components/pet/SocialMediaViewPets'\nimport { GetReq, PostReq } from '../utils/api'\nimport { useSearchContext } from '../context/SearchContext'\nimport { Divider } from 'antd'\nimport '../components/search/search.css'\nimport SearchToggle from '../components/search/SearchToggle'\nimport { useAuthContext } from '../context/AuthContext'\n\nexport default function MyPets() {\n  const {\n    currentUser,\n    user_id,\n    getCurrentUser,\n    petsUserAdopted,\n    petsUserFostered,\n    petsUserLiked,\n    petsUserSaved,\n  } = useAuthContext()\n  const { getAllPets } = useSearchContext()\n  const [petsTabArray, setPetsTabArray] = useState([])\n  const [tab, setTab] = useState('fostered')\n\n  useEffect(() => {\n    async function fetchPets() {\n      const allPets = await getAllPets()\n      await getCurrentUser(user_id)\n      if (allPets && petsUserFostered) {\n        const filteredPets = allPets.filter((pet) =>\n          petsUserFostered.includes(pet.pet_id),\n        )\n        console.log(filteredPets)\n        setPetsTabArray(filteredPets)\n      }\n    }\n    fetchPets()\n  }, [])\n\n  const handleTabChange = async (tabSelected) => {\n    try {\n      setTab(tabSelected)\n      if (tabSelected === 'liked') {\n        const allPets = await getAllPets()\n        setPetsTabArray(\n          allPets?.filter((pet) => petsUserLiked.includes(pet.pet_id)),\n        )\n        console.log(petsTabArray)\n      }\n      if (tabSelected === 'saved') {\n        const allPets = await getAllPets()\n        setPetsTabArray(\n          allPets?.filter((pet) => petsUserSaved.includes(pet.pet_id)),\n        )\n      }\n      if (tabSelected === 'fostered') {\n        const allPets = await getAllPets()\n        setPetsTabArray(\n          allPets?.filter((pet) => petsUserFostered.includes(pet.pet_id)),\n        )\n      }\n      if (tabSelected === 'adopted') {\n        const allPets = await getAllPets()\n        setPetsTabArray(\n          allPets?.filter((pet) => petsUserAdopted.includes(pet.pet_id)),\n        )\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return (\n    <Box>\n      <Tabs isFitted>\n        <Divider style={{ border: 'none', margin: '0.3rem' }} />\n        <TabList>\n          <Tab\n            onClick={() => handleTabChange('fostered')}\n            fontWeight=\"semibold\"\n          >\n            My Fostered Pets\n          </Tab>\n          <Tab onClick={() => handleTabChange('saved')} fontWeight=\"semibold\">\n            Saved Pets\n          </Tab>\n          <Tab onClick={() => handleTabChange('liked')} fontWeight=\"semibold\">\n            Liked Pets\n          </Tab>\n          <Tab onClick={() => handleTabChange('adopted')} fontWeight=\"semibold\">\n            My Adopted Pets\n          </Tab>\n        </TabList>\n\n        <TabPanels>\n          <TabPanel>\n            <GridViewPets cardSize={25} petsArray={petsTabArray} tab={tab} />\n          </TabPanel>\n          <TabPanel>\n            <GridViewPets cardSize={25} petsArray={petsTabArray} tab={tab} />\n          </TabPanel>\n          <TabPanel>\n            <GridViewPets cardSize={25} petsArray={petsTabArray} tab={tab} />\n          </TabPanel>\n          <TabPanel>\n            <GridViewPets cardSize={25} petsArray={petsTabArray} tab={tab} />\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </Box>\n  )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/pages/ProfileSettings.jsx",["348","349"],[],"import React from 'react'\nimport { Tabs, TabList, TabPanels, Tab, TabPanel, Link } from '@chakra-ui/react'\nimport { NavLink } from 'react-router-dom'\nimport ProfileForm from '../components/profile/ProfileForm'\nimport ChangePasswordForm from '../components/profile/ChangePasswordForm'\nimport { Divider } from 'antd'\n\nexport default function ProfileSettings() {\n  return (\n    <>\n      <Divider style={{ border: 'none', margin: '0.5rem' }} />\n      <Tabs isFitted>\n        <TabList>\n          <Tab fontWeight=\"semibold\">UPDATE PROFILE</Tab>\n          <Tab fontWeight=\"semibold\">CHANGE PASSWORD</Tab>\n        </TabList>\n\n        <TabPanels>\n          <TabPanel>\n            <ProfileForm />\n          </TabPanel>\n          <TabPanel>\n            <ChangePasswordForm />\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </>\n  )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/private_routes/PrivateRouteAdmin.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/private_routes/PrivateRouteUser.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/PetDetailsPage.jsx",["350","351","352","353","354"],[],"import React from 'react'\nimport { Flex, Box, VStack, Center, Text } from '@chakra-ui/react'\nimport { GetReq } from '../../utils/api'\nimport { useEffect, useState } from 'react'\nimport { useSearchContext } from '../../context/SearchContext'\nimport PetCardFull from './PetCardFull'\nexport default function PetDetailsPage() {\n    const pathArray = window.location.pathname.split('/')\n    const pet_id = pathArray[pathArray.length - 1]\n    console.log(pet_id)\n    const [pet, setPet] = useState({})\n    const [serverMessage, setServerMessage] = useState(false)\n    useEffect(() => {\n        const getPetById = async () => {\n            try {\n                const res = await GetReq(`/pet/${pet_id}`)\n                if (res) {\n                    setServerMessage(false)\n                    setPet(res)\n                }\n            } catch (error) {\n                console.log(error)\n                setServerMessage(error.response.data)\n            }\n        }\n\n        getPetById()\n    }, [])\n    console.log(pet)\n    return (\n        <Center mr={6} ml={6} w=\"70%\">\n            {!serverMessage ? <PetCardFull pet={pet} /> : <Text>{serverMessage}</Text>}\n        </Center>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/nav/Sidebar.jsx",["355"],[],"import { useColorModeValue } from '@chakra-ui/react'\nimport { Menu } from 'antd'\nimport { SearchIcon } from '@chakra-ui/icons'\nimport { NavLink } from 'react-router-dom'\nimport { Link } from '@chakra-ui/react'\nimport styled from 'styled-components'\nimport Header from './Header'\nimport { HomeFilled, SettingFilled } from '@ant-design/icons'\nimport { useAuthContext } from '../../context/AuthContext'\nimport { useState } from 'react'\nimport DashboardIcon from '@mui/icons-material/Dashboard'\nimport PetsIcon from '@mui/icons-material/Pets'\nimport AddReactionIcon from '@mui/icons-material/AddReaction'\nimport { useSearchContext } from '../../context/SearchContext'\nimport './Sidebar.css'\n\nfunction getItem(label, key, icon, children) {\n    return {\n        key,\n        icon,\n        children,\n        label,\n    }\n}\nconst items = [\n    getItem(\n        'Home',\n        '1',\n        <Link as={NavLink} to=\"/\">\n            <HomeFilled />\n        </Link>\n    ),\n\n    getItem(\n        'Search',\n        '2',\n        <Link as={NavLink} to=\"/search\">\n            <SearchIcon />\n        </Link>\n    ),\n    getItem(\n        `My Pets`,\n        '3',\n        <Link as={NavLink} to=\"/profile/mypets/\">\n            <PetsIcon style={{ fontSize: '1.1rem' }} />\n        </Link>\n    ),\n    getItem(\n        `Profile Settings`,\n        '4',\n        <Link as={NavLink} to=\"/profile\">\n            <SettingFilled />\n        </Link>\n    ),\n    getItem(\n        `Add New Pet`,\n        '5',\n        <Link as={NavLink} to=\"/admin/new\">\n            <AddReactionIcon style={{ fontSize: '1.1rem' }} />\n        </Link>\n    ),\n    getItem(\n        `Dashboard`,\n        '6',\n        <Link as={NavLink} to=\"admin/dashboard\">\n            <DashboardIcon style={{ fontSize: '1.1rem' }} />\n        </Link>\n    ),\n]\n\nconst FirstContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n    overflow: hidden;\n`\n\nconst ParentContainer = styled.div`\n    display: flex;\n    height: 100vh;\n    overflow: hidden;\n`\nconst MainContent = styled.main`\n    flex: 1;\n    overflow: scroll;\n`\n\nconst Sidebar = ({ children }) => {\n    const { isActiveSession } = useAuthContext()\n    const toggleCollapsed = () => {\n        setCollapsed(!collapsed)\n    }\n    const [collapsed, setCollapsed] = useState(false)\n    const theme = useColorModeValue('dark', 'light')\n    return (\n        <FirstContainer>\n            <Header\n                collapsed={collapsed}\n                toggleCollapsed={toggleCollapsed}\n                theme={useColorModeValue('dark', 'light')}\n            />\n            <ParentContainer>\n                {isActiveSession && (\n                    <Menu\n                        defaultSelectedKeys={['1']}\n                        defaultOpenKeys={['sub1']}\n                        theme={theme === 'dark' ? 'light' : 'dark'}\n                        mode=\"inline\"\n                        inlineCollapsed={!collapsed}\n                        items={items}\n                    />\n                )}\n                <MainContent>{children}</MainContent>\n            </ParentContainer>\n        </FirstContainer>\n    )\n}\n\nexport default Sidebar\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/PetForm.jsx",["356","357","358","359"],[],"import React, { useState, useEffect } from 'react'\nimport FormTextAreaField from '../form/FormTextAreaField'\nimport { Box, Center, Flex, Text, useColorModeValue } from '@chakra-ui/react'\nimport FormInputField from '../form/FormInputField'\nimport FormSubmitButtom from '../form/FormSubmitButtom'\nimport FormFileField from '../form/FormFileField'\nimport FormSelectField from '../form/FormSelectField'\nimport * as yup from 'yup'\nimport { Formik } from 'formik'\nimport { Divider } from 'antd'\nimport { useAuthContext } from '../../context/AuthContext'\nimport { PostReq } from '../../utils/api'\nimport { useToast } from '@chakra-ui/react'\nimport { requiredField } from '../../utils/globals'\nimport { Spinner } from '@chakra-ui/react'\nimport { petTypes } from '../../utils/globals'\nimport { petStatus } from '../../utils/globals'\nimport FormCheckbox from '../form/FormCheckbox'\nimport { noProfilePetDark } from '../../utils/globals'\nimport { noProfilePetLight } from '../../utils/globals'\nimport FormNumberField from '../form/FormNumberField'\nimport { GetReq } from '../../utils/api'\n\nexport default function PetForm() {\n    const location = window.location.pathname.split('/')\n    const userLocation = location[location.length - 1]\n    console.log(userLocation)\n    const [pet, setPet] = useState(false)\n    useEffect(() => {\n        const getPetById = async () => {\n            try {\n                if (userLocation !== 'new') {\n                    const res = await GetReq(`/pet/${userLocation}`)\n                    if (res) {\n                        setPet(res)\n                    }\n                } else return\n            } catch (error) {\n                console.log(error)\n            }\n        }\n        getPetById()\n    }, [])\n    console.log(pet, 'jhere', pet.type, pet.name)\n\n    const theme = useColorModeValue('dark', 'light')\n    const [serverError, setServerError] = useState('')\n    const [picture, setPicture] = useState('')\n    const [serverMessage, setServerMessage] = useState('')\n    const [updatingPetData, setUpdatingPetData] = useState(false)\n    const toast = useToast({\n        title: 'Pet saved.',\n        description: \"We've saved a pet\",\n        status: 'success',\n        duration: 6000,\n        isClosable: true,\n        position: 'top',\n    })\n\n    const petSchema = yup.object().shape({\n        type: yup.string(),\n        name: yup.string().required(requiredField),\n        adoptionStatus: yup.string(),\n        height: yup.number().required(requiredField),\n        weight: yup.number().required(requiredField),\n        color: yup.string().required(requiredField),\n        hypoallergenic: yup.bool(),\n        dietary: yup.string(),\n        breed: yup.string().required(requiredField),\n        bio: yup.string(),\n    })\n\n    return (\n        <Formik\n            initialValues={{\n                name: pet.name || '',\n                type: pet.type || '',\n                adoptionStatus: pet.adoptionStatus || '',\n                height: '',\n                weight: '',\n                color: '',\n                hypoallergenic: '',\n                dietary: '',\n                breed: '',\n                bio: '',\n            }}\n            validationSchema={petSchema}\n            onSubmit={async (values, { resetForm }) => {\n                try {\n                    if (values.hypoallergenic === false) {\n                        values.hypoallergenic = 0\n                    }\n                    if (values.hypoallergenic === true) {\n                        console.log(values.hypoallergenic)\n                        values.hypoallergenic = 1\n                    }\n                    const updatedPetData = new FormData()\n                    for (let key in values) {\n                        updatedPetData.append(`${key}`, `${values[key]}`)\n                    }\n                    updatedPetData.append('picture', picture)\n                    for (let key in values) {\n                        console.log(`${key}`, `${values[key]}`)\n                    }\n                    setUpdatingPetData(true)\n                    const res = await PostReq('/pet', updatedPetData)\n                    if (res) {\n                        setPicture('')\n                        setUpdatingPetData(false)\n                        toast()\n                        resetForm()\n                    }\n                } catch (error) {\n                    console.log(error.response.data)\n                    setServerMessage(error.response.data.error)\n                }\n                //   if(typeof picture === 'string'){\n                //     try {\n                //       const updatedUserData = {\n                //         firstname: user.firstname,\n                //         lastname: user.lastname,\n                //         email: user.email,\n                //         phonenumber: user.phonenumber,\n                //         bio: user.bio,\n                //         profilepicture: picture\n                //       }\n                //       console.log(updatedUserData)\n                //       setUpdatingUserData(true)\n                //       const res = await PutReq(`/user/${userId}`, updatedUserData)\n                //       if(res){\n                //         setUpdatingUserData(false)\n                //         toast()\n                //         await getCurrentUser(userId)\n                //       }\n                //   } catch (error) {\n                //     console.log(error.response.data.error)\n                //     setServerMessage(error.response.data.error)\n                //   }\n                // }\n            }}\n        >\n            {({ handleSubmit }) => (\n                <form onSubmit={handleSubmit} flexDirection=\"row\">\n                    <Center w=\"%80\" flexDirection=\"row\" justifyContent=\"center\">\n                        <Box mr={6}>\n                            <FormFileField\n                                noPicture={theme === 'dark' ? noProfilePetDark : noProfilePetLight}\n                                fieldLabel={!picture === '' ? 'Pet Picture' : 'Add Pet Picture'}\n                                req={false}\n                                setPicture={setPicture}\n                                picture={picture}\n                            />\n                        </Box>\n                        <Center ml={6} w=\"50%\" flexDirection=\"column\">\n                            <Divider style={{ border: 'none' }} />\n                            <FormInputField fieldName=\"name\" fieldLabel=\"Name\" req={true} />\n                            <FormSelectField\n                                fieldName=\"adoptionStatus\"\n                                fieldLabel=\"Adoption Status\"\n                                fieldArray={petStatus}\n                            />\n                            <FormInputField fieldName=\"color\" fieldLabel=\"Color\" req={true} />\n                            <FormSelectField fieldName=\"type\" fieldLabel=\"Pet Type\" fieldArray={petTypes} />\n                            <FormInputField\n                                fieldName=\"dietary\"\n                                fieldLabel=\"Dietary Restrictions (separated by comma)\"\n                                req={false}\n                            />\n                            <FormInputField fieldName=\"breed\" fieldLabel=\"Breed\" req={true} />\n                            <FormNumberField\n                                fieldName=\"height\"\n                                fieldLabel=\"Height\"\n                                value=\"height\"\n                                fieldUnit=\"cm\"\n                                fieldSize=\"95%\"\n                                req={true}\n                            />\n                            <FormNumberField\n                                fieldName=\"weight\"\n                                fieldLabel=\"Weight\"\n                                value=\"weight\"\n                                fieldUnit=\"kg\"\n                                fieldSize=\"95%\"\n                                req={true}\n                            />\n                            <FormCheckbox fieldLabel=\"Hypoallergenic\" fieldName=\"hypoallergenic\" isChecked={false} />\n                            <FormTextAreaField fieldName=\"bio\" fieldLabel=\"Bio\" req={false} />\n                            {serverError ? (\n                                <Text color=\"red\" mt={4} textAlign=\"center\">\n                                    Server Error:\n                                </Text>\n                            ) : null}\n                            <FormSubmitButtom mt={2} buttonLabel={!updatingPetData ? 'Update' : <Spinner />} />\n                        </Center>\n                    </Center>\n                    <Text>{serverMessage}</Text>\n                </form>\n            )}\n        </Formik>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/utils/api.js",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/GridViewPets.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/SocialMediaViewPets.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/DashboardTemple.jsx",["360"],["361"],"import React from 'react'\nimport { Box, Flex, Center } from '@chakra-ui/react'\nimport DashboardTabs from './DashboardTabs'\nimport { useState, useEffect } from 'react'\nimport { GetReq } from '../../utils/api'\nimport { petStatus, petTypes } from '../../utils/globals'\nimport PieChart from './PieChart'\nimport BarChart from './BarChart'\nimport Statistics from './Statistics'\nimport { Divider } from 'antd'\n\nexport default function DashboardTemple({ data, labels }) {\n    const [pets, setPets] = useState([])\n    const [users, setUsers] = useState()\n    const [areListsLoading, setAreListsLoading] = useState(true)\n    const [tab, setTab] = useState('pets')\n    const adoptedPercentage = Math.round(\n        (pets.filter((pet) => pet.adoptionStatus === 'Adopted').length / pets.length) * 100\n    )\n    const fosteredPercentage = Math.round(\n        (pets.filter((pet) => pet.adoptionStatus === 'Fostered').length / pets.length) * 100\n    )\n    const availablePercentage = Math.round(\n        (pets.filter((pet) => pet.adoptionStatus === 'Available').length / pets.length) * 100\n    )\n    const colorScale = ['rgb(218 112 214 / 80%)', 'rgb(22 150 255 / 80%)', 'rgb(80 200 121 / 80%)']\n    const bgColor = [\n        'rgba(153, 102, 255, 0.5)',\n        'rgb(196,241,249, 0.5)',\n        'rgba(75, 192, 192, 0.5)',\n        'rgba(54, 162, 235, 0.5)',\n    ]\n    const borderColor = ['rgb(153, 102, 255)', 'rgb(196,241,249)', 'rgb(75, 192, 192)', 'rgb(54, 162, 235)']\n\n    const petTypesWithoutAny = petTypes.slice(1)\n    const petTypesLength = petTypesWithoutAny.map((type) => pets.filter((pet) => pet.type === type).length)\n\n    useEffect(() => {\n        const awaitGetUsers = async () => {\n            await getUsers()\n            await getPets()\n            setAreListsLoading(false)\n        }\n        awaitGetUsers() // eslint-disable-next-line\n    }, [])\n\n    const getUsers = async () => {\n        try {\n            const data = await GetReq('/user')\n            console.log(data)\n            setUsers(data.users)\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    const getPets = async () => {\n        try {\n            const data = await GetReq('/pet')\n            console.log(data)\n            setPets(data)\n            console.log(pets.length)\n        } catch (err) {\n            console.log(err)\n        }\n    }\n    return (\n        <Box>\n            <Divider style={{ border: 'none', margin: '0.4rem' }} />\n            <Flex flexDir=\"column\" h=\"100% \">\n                <Flex w=\"100%\" h=\"10%\">\n                    <Center placeContent=\"center\" w=\"100%\">\n                        <Flex flexDir=\"row\" w=\"80%\">\n                            <PieChart\n                                data={[adoptedPercentage, fosteredPercentage, availablePercentage]}\n                                colorScale={colorScale}\n                                labels={petStatus}\n                                endAngle={360}\n                            />\n                            <BarChart\n                                axeX={petTypesWithoutAny}\n                                axeY={petTypesLength}\n                                nameChart=\"Types Of Pets\"\n                                backgroundColor={bgColor}\n                                borderColor={borderColor}\n                            />\n                            {/* <Statistics total /> */}\n                        </Flex>\n                    </Center>\n                </Flex>\n                <Flex w=\"100%\" h=\"90%\">\n                    <Flex w=\"100%\">\n                        <DashboardTabs\n                            users={users}\n                            pets={pets}\n                            areListsLoading={areListsLoading}\n                            tab={tab}\n                            setTab={setTab}\n                        />\n                    </Flex>\n                </Flex>\n            </Flex>\n        </Box>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/utils/globals.js",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/search/AdvancedSearchFilterCriteria.jsx",["362","363","364","365","366","367","368"],[],"import { useEffect, useState } from 'react'\nimport { Center, Button, Flex, FormLabel } from '@chakra-ui/react'\nimport { ChevronDownIcon, SearchIcon } from '@chakra-ui/icons'\nimport { petStatus } from '../../utils/globals'\nimport { useSearchContext } from '../../context/SearchContext'\nimport FormNumberField from '../form/FormNumberField'\nimport * as yup from 'yup'\nimport { Formik } from 'formik'\nimport FormSubmitButtom from '../form/FormSubmitButtom'\nimport { Input } from '@chakra-ui/react'\nimport FilterSlider from './FilterSlider'\n\nexport default function AdvancedSearchFilterCriteria() {\n    const { getFilteredPetsByCriteria, setFilterSelection, filterSelection } = useSearchContext()\n\n    const [minHeight, setMinHeight] = useState(0)\n    const [maxHeight, setMaxHeight] = useState(100)\n\n    const [minWeight, setMinWeight] = useState(0)\n    const [maxWeight, setMaxWeight] = useState(100)\n\n    const [petName, setPetName] = useState()\n\n    const handleSliderChangeHeight = (values) => {\n        setMinHeight(values[0])\n        setMaxHeight(values[1])\n    }\n\n    const handleSliderChangeWeight = (values) => {\n        setMinWeight(values[0])\n        setMaxWeight(values[1])\n    }\n\n    useEffect(() => {\n        setFilterSelection({\n            ...filterSelection,\n            minHeight: minHeight,\n            maxHeight: maxHeight,\n            minWeight: minWeight,\n            maxWeight: maxWeight,\n            name: petName,\n        })\n        // yofi manu\n    }, [petName])\n\n    const weightHeightShema = yup.object().shape({\n        type: yup.string(),\n        name: yup.string(),\n        adoptionStatus: yup.string(),\n        minHeight: yup.number(),\n        maxHeight: yup.number(),\n        minWeight: yup.number(),\n        maxWeight: yup.number(),\n    })\n\n    return (\n        <Formik\n            initialValues={{\n                name: '',\n                adoptionStatus: '',\n                minHeight: '',\n                maxHeight: '',\n                minWeight: '',\n                maxWeight: '',\n            }}\n            validationSchema={weightHeightShema}\n            onSubmit={async (values, { resetForm }) => {\n                try {\n                    if (\n                        filterSelection.adoptionStatus === 'Adoption Status' ||\n                        filterSelection.adoptionStatus === 'Any'\n                    ) {\n                        filterSelection.adoptionStatus = ''\n                    }\n                    if (filterSelection.type === 'Type' || filterSelection.type === 'Any') {\n                        filterSelection.type = ''\n                    }\n\n                    setFilterSelection({\n                        type: filterSelection.type,\n                        name: petName,\n                        adoptionStatus: filterSelection.adoptionStatus,\n                        minHeight: minHeight,\n                        maxHeight: maxHeight,\n                        minWeight: minWeight,\n                        maxWeight: maxWeight,\n                    })\n                    console.log(filterSelection)\n                    await getFilteredPetsByCriteria(filterSelection)\n                } catch (error) {}\n            }}\n        >\n            {({ handleSubmit }) => (\n                <form onSubmit={handleSubmit}>\n                    <Center>\n                        <Flex mt={2} w=\"100%\" alignContent=\"center\" placeItems=\"center\" flexDirection=\"column\">\n                            <Input\n                                name=\"name\"\n                                type=\"text\"\n                                placeholder=\"Search for a pet by name...\"\n                                px={6}\n                                onChange={(e) => setPetName(e.target.value)}\n                                onKeyDown={(e) => (e.key === 'Enter' ? handleSubmit() : null)}\n                            />\n                            <Flex my={4} alignContent=\"center\" flexDirection=\"row\">\n                                <FilterSlider\n                                    min={minHeight}\n                                    max={maxHeight}\n                                    onSliderChange={handleSliderChangeHeight}\n                                    filter=\"height\"\n                                />\n                                <FilterSlider\n                                    min={minWeight}\n                                    max={maxWeight}\n                                    onSliderChange={handleSliderChangeWeight}\n                                    filter=\"weight\"\n                                />\n                            </Flex>\n                            <Button w=\"50%\" aria-label=\"Search\" colorScheme=\"blue\" onClick={handleSubmit}>\n                                Search\n                            </Button>\n                        </Flex>\n                    </Center>\n                </form>\n            )}\n        </Formik>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/search/BasicSearchFilterCriteria.jsx",["369","370","371","372","373"],[],"import { useState, useEffect } from 'react'\nimport {\n    Center,\n    InputGroup,\n    Button,\n    MenuButton,\n    Menu,\n    MenuList,\n    MenuItem,\n    FormLabel,\n    Flex,\n    useMediaQuery,\n    Box,\n} from '@chakra-ui/react'\nimport { ChevronDownIcon } from '@chakra-ui/icons'\nimport { petTypes } from '../../utils/globals'\nimport { petStatus } from '../../utils/globals'\nimport { useSearchContext } from '../../context/SearchContext'\nimport SearchToggle from './SearchToggle'\nimport { Divider } from 'antd'\n\nexport default function BasicSearchFilterCriteria({ advancedSearch, petsArray, usersLikes }) {\n    const {\n        getFilteredPetsByCriteria,\n        setFilterSelection,\n        filterSelection,\n        typeFilter,\n        setTypeFilter,\n        adpotionStatusFilter,\n        setAdpotionStatusFilter,\n    } = useSearchContext()\n\n    // const [typeFilter, setTypeFilter] = useState(\"Type\");\n    // const [adpotionStatusFilter, setAdpotionStatusFilter] = useState(\"Adoption Status\");\n\n    useEffect(() => {\n        setFilterSelection({\n            type: typeFilter,\n            adoptionStatus: adpotionStatusFilter,\n        })\n    }, [typeFilter, adpotionStatusFilter])\n\n    const handleType = (type) => {\n        if (type === 'Any' || type === 'Type') {\n            setTypeFilter('Any')\n            filterSelection.type = ''\n            if (type === 'Type') filterSelection.type = ''\n        } else setTypeFilter(type)\n    }\n\n    const handleStatus = (status) => {\n        if (status === 'Any' || status === 'Adoption Status') {\n            setAdpotionStatusFilter('Any')\n            filterSelection.adoptionStatus = ''\n        } else setAdpotionStatusFilter(status)\n    }\n\n    const handleSearch = () => {\n        if (filterSelection.adoptionStatus === 'Adoption Status' || filterSelection.adoptionStatus === 'Any') {\n            filterSelection.adoptionStatus = ''\n            setAdpotionStatusFilter('Any')\n        }\n        if (filterSelection.type === 'Type' || filterSelection.type === 'Any') {\n            filterSelection.type = ''\n            setFilterSelection('Any')\n        }\n        getFilteredPetsByCriteria(filterSelection)\n    }\n\n    return (\n        <>\n            <Center w=\"100%\">\n                <InputGroup zIndex={4} justifyContent=\"center\" w={'100%'}>\n                    <Box flexDirection=\"column\">\n                        <Flex>\n                            <Menu>\n                                <MenuButton as={Button} rightIcon={<ChevronDownIcon />} w=\"11.5rem\">\n                                    {typeFilter}\n                                </MenuButton>\n                                <MenuList>\n                                    {petTypes.map((type) => (\n                                        <MenuItem key={type} onClick={() => handleType(type)}>\n                                            {type}\n                                        </MenuItem>\n                                    ))}\n                                </MenuList>\n                            </Menu>\n                            <Menu>\n                                <MenuButton as={Button} rightIcon={<ChevronDownIcon />} w=\"11.5rem\" ml={6}>\n                                    {adpotionStatusFilter === '' ? 'Any' : adpotionStatusFilter}\n                                </MenuButton>\n                                <MenuList>\n                                    <MenuItem onClick={() => handleStatus('Any')}>Any</MenuItem>\n                                    {petStatus.map((status) => (\n                                        <MenuItem key={status} onClick={() => handleStatus(status)}>\n                                            {status}\n                                        </MenuItem>\n                                    ))}\n                                </MenuList>\n                            </Menu>\n                        </Flex>\n                        <Divider style={{ border: 'none', margin: '0.4rem' }} />\n                        <Flex flexDirection=\"column\" alignItems=\"center\">\n                            {!advancedSearch ? (\n                                <Button\n                                    w=\"80%\"\n                                    ml={2}\n                                    px={3}\n                                    py={3}\n                                    aria-label=\"Search\"\n                                    colorScheme=\"blue\"\n                                    onClick={handleSearch}\n                                >\n                                    Search\n                                </Button>\n                            ) : null}\n                        </Flex>\n                    </Box>\n                </InputGroup>\n            </Center>\n        </>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/search/SearchToggle.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/profile/ProfileForm.jsx",["374"],[],"import React, { useState, useEffect } from 'react'\nimport FormTextAreaField from '../form/FormTextAreaField'\nimport { Box, Flex, Switch, Text, useColorModeValue } from '@chakra-ui/react'\nimport FormInputField from '../form/FormInputField'\nimport * as yup from 'yup'\nimport { telRegExp } from '../../utils/globals'\nimport { Formik } from 'formik'\nimport { Divider } from 'antd'\nimport { useAuthContext } from '../../context/AuthContext'\nimport FormSubmitButtom from '../form/FormSubmitButtom'\nimport { PutReq } from '../../utils/api'\nimport FormFileField from '../form/FormFileField'\nimport { useToast } from '@chakra-ui/react'\nimport { requiredField } from '../../utils/globals'\nimport { Spinner } from '@chakra-ui/react'\nimport { noProfilePictureDark, noProfilePictureLight } from '../../utils/globals'\n\nexport default function ProfileForm() {\n    const theme = useColorModeValue('dark', 'light')\n\n    const { currentUser, getCurrentUser } = useAuthContext()\n    console.log(currentUser.is_private)\n    const [picture, setPicture] = useState(currentUser?.picture === '' ? noProfilePictureDark : currentUser?.picture)\n    const [serverMessage, setServerMessage] = useState()\n    const [updatingUserData, setUpdatingUserData] = useState(false)\n    const [publicProfile, setPublicProfile] = useState(currentUser?.is_private)\n    const [isChecked, setIsChecked] = useState(0)\n\n    const toggleAccount = (e) => {\n        console.log(e.target.checked)\n        if (e.target.checked === false) {\n            setIsChecked(0)\n            console.log(isChecked)\n        }\n        if (e.target.checked === true) {\n            setIsChecked(1)\n            console.log(isChecked)\n        }\n        setPublicProfile(publicProfile === 1 ? 0 : 1)\n    }\n\n    const toast = useToast({\n        title: 'Profile updated.',\n        description: \"We've updated your profile.\",\n        status: 'success',\n        duration: 6000,\n        isClosable: true,\n        position: 'top',\n    })\n\n    const updateUserSchema = yup.object().shape({\n        firstname: yup.string().required(requiredField).min(3, 'Name must be at least 3 characters.'),\n        lastname: yup.string().min(3, 'Last Name must be at least 3 characters.'),\n        email: yup.string().email('Invalid e-mail.'),\n        phonenumber: yup.string().matches(telRegExp, 'Invalid phone number.'),\n        bio: yup.string().max(350, \"Bio can't exceed 350 characters.\"),\n        is_private: yup.number(),\n    })\n\n    return (\n        <Formik\n            initialValues={{\n                firstname: currentUser.firstname,\n                lastname: currentUser.lastname,\n                email: currentUser.email,\n                phonenumber: currentUser.phonenumber,\n                bio: currentUser.bio || '',\n                is_private: currentUser.is_private,\n            }}\n            validationSchema={updateUserSchema}\n            onSubmit={async (user) => {\n                if (typeof picture === 'object') {\n                    try {\n                        const updatedUserData = new FormData()\n                        for (let key in user) {\n                            updatedUserData.append(`${key}`, `${user[key]}`)\n                        }\n                        if (publicProfile !== isChecked) {\n                            updatedUserData.set('is_private', isChecked)\n                        }\n                        updatedUserData.append('picture', picture)\n\n                        console.log('here2')\n                        for (let key in user) {\n                            console.log(`${key}`, `${user[key]}`)\n                        }\n                        setUpdatingUserData(true)\n                        const res = await PutReq(`/user/picture/${currentUser.user_id}`, updatedUserData)\n                        if (res) {\n                            setUpdatingUserData(false)\n                            toast()\n                            await getCurrentUser(currentUser.user_id)\n                        }\n                    } catch (error) {\n                        setServerMessage(error.response)\n                    }\n                }\n                if (typeof picture === 'string') {\n                    try {\n                        const updatedUserData = {\n                            firstname: user.firstname,\n                            lastname: user.lastname,\n                            email: user.email,\n                            phonenumber: user.phonenumber,\n                            bio: user.bio,\n                            picture: picture,\n                            is_private: isChecked,\n                        }\n                        console.log(updatedUserData)\n                        setUpdatingUserData(true)\n                        const res = await PutReq(`/user/${currentUser.user_id}`, updatedUserData)\n                        if (res) {\n                            setUpdatingUserData(false)\n                            toast()\n                            getCurrentUser(currentUser.user_id)\n                        }\n                    } catch (error) {\n                        console.log(error.response.data.error)\n                        setServerMessage(error.response.data.error)\n                    }\n                }\n            }}\n        >\n            {({ handleSubmit }) => (\n                <form onSubmit={handleSubmit} flexDirection=\"row\">\n                    <Flex flexDirection=\"row\" justifyContent=\"center\">\n                        <Box mr={6}>\n                            <Divider style={{ border: 'none' }} />\n                            <Divider style={{ border: 'none' }} />\n                            <FormFileField\n                                fieldLabel={picture === '' ? 'Profile Picture' : 'Add Your Profile Picture'}\n                                noPicture={theme === 'dark' ? noProfilePictureDark : noProfilePictureLight}\n                                req={false}\n                                setPicture={setPicture}\n                                picture={picture}\n                            />\n                        </Box>\n                        <Box w=\"50%\" ml={6}>\n                            <Divider style={{ border: 'none' }} />\n                            <FormInputField fieldLabel=\"First Name\" fieldName=\"firstname\" req={true} />\n                            <FormInputField fieldLabel=\"Last Name\" fieldName=\"lastname\" req={false} />\n                            <FormInputField fieldLabel=\"E-mail\" fieldName=\"email\" req={true} />\n                            <FormInputField fieldLabel=\"Phone\" fieldName=\"phonenumber\" req={false} />\n                            <FormTextAreaField fieldLabel=\"Bio\" fieldName=\"bio\" req={false} />\n                            <Text mt={4} mb={3} fontWeight=\"500\">\n                                Public Account &nbsp;&nbsp;\n                                <Switch\n                                    size=\"md\"\n                                    color=\"blue\"\n                                    isChecked={publicProfile}\n                                    onChange={(e) => toggleAccount(e)}\n                                />\n                                &nbsp;&nbsp;Private Account\n                            </Text>\n                            {publicProfile ? (\n                                <Text fontSize=\"0.72rem\">\n                                    Welcome to your private account. Your information remains confidential, which means\n                                    other users cannot view your avatar, email, or name. However, as a result of this\n                                    setting, you will lose some benefits and may not be able to interact with certain\n                                    users on the platform. We hope you still find value in the features available to you\n                                    as a private user.\n                                </Text>\n                            ) : (\n                                <Text fontSize=\"0.72rem\">\n                                    We would like to inform you that your account is public, which means that your\n                                    avatar, email, and name will be visible to other users, that helps us to interact\n                                    with other users as well. This is to ensure transparency and promote a safe and\n                                    welcoming community. If you have any concerns or questions, please don't hesitate to\n                                    contact us.\n                                </Text>\n                            )}\n\n                            <Divider style={{ border: 'none' }} />\n                            <FormSubmitButtom buttonLabel={!updatingUserData ? 'Update' : <Spinner />} />\n                        </Box>\n                    </Flex>\n                    <Text>{serverMessage}</Text>\n                </form>\n            )}\n        </Formik>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/profile/ChangePasswordForm.jsx",["375"],[],"import { React, useState } from 'react'\nimport { useAuthContext } from '../../context/AuthContext'\nimport FormPasswordField from '../form/FormPasswordField'\nimport { requiredField } from '../../utils/globals'\nimport * as yup from 'yup'\nimport { Formik } from 'formik'\nimport { Avatar, Divider } from 'antd'\nimport { Text, Box, Center, Spinner, useToast } from '@chakra-ui/react'\nimport FormSubmitButtom from '../form/FormSubmitButtom'\nimport { PutReq } from '../../utils/api'\n\nexport default function ChangePasswordForm() {\n    const [changingUserPassword, sethCangingUserPassword] = useState(false)\n    const [serverError, setServerError] = useState(false)\n    const { currentUser, userId } = useAuthContext()\n    const toast = useToast({\n        title: 'Password updated.',\n        description: \"We've updated your password.\",\n        status: 'success',\n        duration: 6000,\n        isClosable: true,\n        position: 'top',\n    })\n\n    const updatePasswordSchema = yup.object().shape({\n        currentpassword: yup.string().required(requiredField),\n        password: yup.string().required(requiredField).min(8, 'Password must be at least 8 characters.'),\n        repeatpassword: yup\n            .string()\n            .required(requiredField)\n            .oneOf([yup.ref('password')], 'Passwords must match.'),\n    })\n\n    return (\n        <Formik\n            initialValues={{\n                currentpassword: '',\n                password: '',\n                repeatpassword: '',\n            }}\n            validationSchema={updatePasswordSchema}\n            validateOnChange={false}\n            onSubmit={async (values, { resetForm }) => {\n                sethCangingUserPassword(true)\n                try {\n                    const res = await PutReq(`/user/password/${currentUser.user_id}`, values)\n                    if (res) {\n                        setServerError(false)\n                        sethCangingUserPassword(false)\n                        toast()\n                        resetForm()\n                    }\n                } catch (error) {\n                    console.log(error)\n                    setServerError(error.response.data)\n                    sethCangingUserPassword(false)\n                }\n            }}\n        >\n            {({ handleSubmit }) => (\n                <form onSubmit={handleSubmit}>\n                    <Divider style={{ border: 'none' }} />\n                    <Center alignContent=\"end\" flexDirection=\"column\" justifyContent=\"center\">\n                        <Avatar size={80} src={currentUser?.picture} />\n                        <Text mt={3} fontWeight=\"bold\">\n                            {' '}\n                            {currentUser.firstname} {currentUser.lastname}\n                        </Text>\n                    </Center>\n                    <Divider />\n                    <Center>\n                        <Box w=\"50%\" display=\"flex\" justifyContent=\"center\" flexDirection=\"column\">\n                            <FormPasswordField fieldLabel=\"Current Password\" fieldName=\"currentpassword\" req={true} />\n                            <FormPasswordField fieldLabel=\"New Password\" fieldName=\"password\" req={true} />\n                            <FormPasswordField\n                                fieldLabel=\"Confirm New Password\"\n                                fieldName=\"repeatpassword\"\n                                req={true}\n                            />\n                            {serverError ? (\n                                <Text color=\"red\" fontWeight=\"500\" mt={4} textAlign=\"center\">\n                                    {serverError}\n                                </Text>\n                            ) : null}\n                            <FormSubmitButtom buttonLabel={!changingUserPassword ? 'Save Changes' : <Spinner />} />\n                        </Box>\n                    </Center>\n                </form>\n            )}\n        </Formik>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/nav/Header.jsx",["376","377"],[],"import { Box, Flex, Link, useDisclosure, Button } from '@chakra-ui/react'\nimport ModeSwitcher from '../../ModeSwitcher'\nimport ResgistrationModal from '../registration/RegistrationModal'\nimport { useAuthContext } from '../../context/AuthContext'\nimport { useColorModeValue } from '@chakra-ui/react'\nimport MenuIcon from '@mui/icons-material/Menu'\nimport ProfileMenu from './ProfileMenu'\nimport Logo from './Logo'\nimport SearchBar from '../search/SearchBar'\nimport LightModeIcon from '@mui/icons-material/LightMode'\nimport { brandLight, brandDark } from '../../utils/globals'\n\nexport default function Header({ toggleCollapsed }) {\n    const { isActiveSession, currentUser } = useAuthContext()\n    console.log(isActiveSession, currentUser)\n\n    const { isOpen, onToggle } = useDisclosure()\n    const toggleModal = () => onToggle()\n    const theme = useColorModeValue('dark', 'light')\n\n    return (\n        <>\n            <Box\n                h=\"20hv\"\n                p={3}\n                boxShadow=\"0 1px 2px 0 rgba(0, 0, 0, 0.05);\"\n                bgColor={theme === 'dark' ? 'white' : '#011529'}\n            >\n                <Flex justifyContent=\"space-between\">\n                    <Flex ml={!isActiveSession && 4} alignItems=\"center\">\n                        {isActiveSession && (\n                            <>\n                                <Button mr={3} type=\"primary\" onClick={toggleCollapsed} backgroundColor=\"transparent\">\n                                    <MenuIcon />\n                                </Button>\n                            </>\n                        )}\n                        <Logo src={theme === 'light' ? brandLight : brandDark} />\n                    </Flex>\n                    <Flex alignItems=\"center\">\n                        <>\n                            {/* <SearchBar /> */}\n                            {isActiveSession && <ProfileMenu currentUser={currentUser} />}\n                        </>\n                        {!isActiveSession && (\n                            <Link color={theme === 'dark' ? 'black' : 'white'} onClick={toggleModal} fontWeight=\"500\">\n                                Log&nbsp;In&nbsp;/&nbsp;Sing&nbsp;Up\n                            </Link>\n                        )}\n\n                        <ModeSwitcher />\n                    </Flex>\n                </Flex>\n            </Box>\n            <ResgistrationModal isOpen={isOpen} toggleModal={toggleModal} />\n        </>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/PetCardFull.jsx",["378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398"],[],"import { useState, useEffect, React, useRef, useLayoutEffect } from 'react'\nimport {\n    Card,\n    CardHeader,\n    useToast,\n    CardFooter,\n    Text,\n    Button,\n    Image,\n    Box,\n    Flex,\n    Avatar,\n    Heading,\n    IconButton,\n    Tooltip,\n    Tag,\n    TagLabel,\n    useColorMode,\n    Stack,\n    CardBody,\n    Center,\n    useMediaQuery,\n} from '@chakra-ui/react'\nimport { petStatusBgColor } from '../../utils/globals'\nimport TurnedInNotIcon from '@mui/icons-material/TurnedInNot'\nimport { useSearchContext } from '../../context/SearchContext'\nimport { useAuthContext } from '../../context/AuthContext'\nimport FavoriteIcon from '@mui/icons-material/Favorite'\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz'\nimport BookmarkIcon from '@mui/icons-material/Bookmark'\nimport { Spinner } from '@chakra-ui/react'\nimport './PetCardGrid.css'\nimport { HeartFilled } from '@ant-design/icons'\n\nimport '../search/search.css'\nimport { useSearchParams } from 'react-router-dom'\nimport PetActionsFull from './PetActionsFull'\nimport PetTag from './PetTag'\nimport PetActionsGrid from './PetActionsGrid'\nexport default function PetCardFull({ pet, status, userInfoLikes, viewTab }) {\n    console.log(pet, 'cardFull')\n    const theme = useColorMode('dark', 'light')\n    const [isSmallerThan1400] = useMediaQuery('(max-width: 1400px)')\n    const [adoptionStatus, setAdoptionStatus] = useState(status)\n    useEffect(() => {\n        setAdoptionStatus(status)\n    }, [status])\n\n    return (\n        <Card\n            direction={isSmallerThan1400 ? { base: 'row', sm: 'column' } : { base: 'column', sm: 'row' }}\n            overflow=\"scroll\"\n            variant=\"outline\"\n            mb={8}\n            bgColor={theme === 'dark' && '#121212'}\n            style={{ overflowWrap: 'break-word' }}\n        >\n            <Image\n                objectFit=\"cover\"\n                maxW={isSmallerThan1400 ? '100%' : { base: '30rem', sm: '30rem' }}\n                maxH={isSmallerThan1400 ? '50vh' : ''}\n                src={pet?.picture}\n                alt={pet?.name}\n                borderBottomRightRadius=\"40%\"\n            />\n\n            <Stack w={isSmallerThan1400 ? '100%' : { base: '100%', md: '70%' }} p={4}>\n                <CardBody>\n                    <Center placeContent=\"start\" mb={4}>\n                        <Avatar\n                            color=\"#121212\"\n                            size=\"md\"\n                            style={petStatusBgColor(pet?.adoptionStatus)}\n                            name={pet?.name}\n                            mr={3}\n                        />\n                        <Heading alignContent=\"end\" size=\"md\">\n                            {pet?.name}\n                        </Heading>\n                    </Center>\n\n                    <Text mt={2}>\n                        <b>Bio:</b>\n                    </Text>\n                    <Text>{pet?.bio}</Text>\n                    <Text mt={2}>\n                        <b>Dietary:</b>\n                    </Text>\n                    <Text>{pet?.dietary}</Text>\n                    <Text mt={2}>\n                        <b>Relevant Information:</b>\n                    </Text>\n                    <Flex mt={2}>\n                        <PetTag label={pet?.type} />\n                        <PetTag label={pet?.breed} />\n                        <PetTag label={pet?.color} />\n                        <PetTag label={pet?.hypoallergenic === 0 ? 'No hypoallergenic' : 'Hypoallergenic'} />\n                        <PetTag label={`${pet?.height}cm`} />\n                        <PetTag label={`${pet?.weight}kg`} />\n                    </Flex>\n                </CardBody>\n                <CardFooter>\n                    <PetActionsGrid\n                        pet={pet}\n                        status={status}\n                        userInfoLikes={userInfoLikes}\n                        viewTab={viewTab}\n                        // setAdoptionStatus={setAdoptionStatus}\n                    />\n                </CardFooter>\n            </Stack>\n        </Card>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/form/FormInputField.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/form/FormTextAreaField.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/form/FormFileField.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/form/FormSubmitButtom.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/form/FormNumberField.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/form/FormSelectField.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/form/FormCheckbox.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/PetCardGrid.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/DashboardTabs.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/ModeSwitcher.js",["399","400"],[],"import React from 'react'\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from '@chakra-ui/react'\nimport { FaMoon, FaSun } from 'react-icons/fa'\nimport LightModeIcon from '@mui/icons-material/LightMode'\n\nconst ModeSwitcher = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue('dark', 'light')\n  const SwitchIcon = useColorModeValue(FaMoon, LightModeIcon)\n\n  return (\n    <IconButton\n      size=\"sd\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon color={text === 'dark' ? 'dark' : 'white'} />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n\nexport default ModeSwitcher\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/BarChart.jsx",["401","402","403","404","405","406"],[],"import { Flex, Text, useColorModeValue, Card, Box, Tag, TagLabel } from '@chakra-ui/react'\nimport { Bar } from 'react-chartjs-2'\nimport './Graphs.css'\nimport Chart, { RadialLinearScale } from 'chart.js/auto'\nimport { ChartElement } from 'chart.js/auto'\n\nChart.register(RadialLinearScale)\n\nexport default function BarChart({ axeX, axeY, nameChart, backgroundColor, borderColor }) {\n    const labels = axeX\n    const data = {\n        labels: labels,\n        datasets: [\n            {\n                label: nameChart,\n                data: axeY,\n                backgroundColor: backgroundColor,\n                borderColor: borderColor,\n                borderWidth: 2,\n            },\n        ],\n    }\n    const options = {\n        legend: {\n            display: false,\n        },\n        plugins: {\n            tooltip: {\n                display: false,\n                events: ['click'],\n            },\n        },\n    }\n\n    const theme = useColorModeValue('dark', 'light')\n\n    return (\n        <>\n            <Box\n                w=\"100%\"\n                mr={2}\n                p={5}\n                border={theme === 'light' ? 'solid 1px #474a54' : 'solid 1px #e2e8f0'}\n                borderRadius=\"6px\"\n            >\n                <Bar data={data} options={options} />\n            </Box>\n        </>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/search/FilterSlider.jsx",["407","408","409"],[],"\nimport { useState } from \"react\";\nimport { \n  Flex, Text, useColorMode,\n  RangeSlider, RangeSliderTrack, RangeSliderMark, RangeSliderFilledTrack, RangeSliderThumb, Tag, TagLabel, TagCloseButton \n} from \"@chakra-ui/react\";\nimport { Divider } from 'antd';\nexport default function FilterSlider({filter, min, max, onSliderChange, mr}) {\n  \n  const [sliderMark, setSliderMark] = useState([min, max]);\n  const [showTag, setShowTag] = useState(true)\n  const [showSliderMark, setShowSliderMark] = useState(false);\n\n  \n  return (\n    <Flex wrap=\"nowrap\" flexDirection=\"column\" mr={mr}>\n      <Flex>\n      <Text fontSize=\"md\" fontWeight=\"semibold\" mr={4} casing=\"capitalize\">{filter}</Text>\n      <RangeSlider\n        mr={5}\n        aria-label={[\"min\", \"max\"]}\n        colorScheme=\"blue\"\n        defaultValue={[0, 100]}\n        w=\"10rem\"\n        onChange={val => {setSliderMark(val); setShowSliderMark(false); onSliderChange(val); setShowTag(false)}}\n        onChangeEnd={val => {\n          setShowSliderMark([0, 0]); \n          setShowSliderMark(false);\n    \n        }}\n      >\n      {showSliderMark\n        ? <>\n            <RangeSliderMark\n              value={sliderMark[0]}\n              textAlign=\"center\"\n              mt=\"-6\"\n              ml=\"-5\"\n              minW=\"max-content\"\n              fontSize=\"md\"\n            >\n              {`${sliderMark[0]} cm`}\n            </RangeSliderMark>\n            <RangeSliderMark\n              value={sliderMark[1]}\n              textAlign=\"center\"\n              mt=\"6\"\n              ml=\"-5\"\n              minW=\"max-content\"\n              fontSize=\"md\"\n            >\n              {`${sliderMark[1]} cm`}\n            </RangeSliderMark>\n          </>\n        : null}\n        <RangeSliderTrack>\n          <RangeSliderFilledTrack />\n        </RangeSliderTrack>\n        <RangeSliderThumb index={0} />\n        <RangeSliderThumb index={1} />\n      </RangeSlider>\n      </Flex>\n      <Divider style={{border:\"none\", margin:\"0.5rem\"}}/>\n      <Flex display={showTag ? \"none\" :\"\"} justifyContent=\"center\" alignContent=\"center\">\n        <Tag   flexDirection=\"row\" wrap=\"row nowrap\" size=\"md\" key={filter} variant='outline' colorScheme='blue'>\n          <TagLabel>{filter === \"height\" ? `${min}-${max} cm` : `${min}-${max} kg`} </TagLabel>\n          \n        </Tag>\n    </Flex>\n  </Flex>\n  )\n}","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/PieChart.jsx",["410","411"],[],"import { Flex, Text, useColorModeValue, Card, Box, Tag, TagLabel } from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport { VictoryPie } from 'victory'\n\nimport './Graphs.css'\n\nexport default function PieChart({ data, colorScale, labels }) {\n    const theme = useColorModeValue('dark', 'light')\n    const [endAngle, setEndAngle] = useState(0)\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setEndAngle((prevAngle) => prevAngle + 10)\n        }, 30)\n        return () => clearInterval(interval)\n    }, [])\n    return (\n        <>\n            <Box\n                w=\"100%\"\n                mr={2}\n                border={theme === 'light' ? 'solid 1px #474a54' : 'solid 1px #e2e8f0'}\n                borderRadius=\"6px\"\n            >\n                <Flex>\n                    <Box mr={0}>\n                        <VictoryPie\n                            data={data}\n                            colorScale={colorScale}\n                            innerRadius={125}\n                            endAngle={endAngle}\n                            labels={() => null}\n                        />\n                    </Box>\n                    <Flex mr={3} p={4} ml={0} w=\"70%\" alignSelf=\"center\" flexDirection=\"column\">\n                        {data?.map((dataToAdd, i) => (\n                            <Tag key={i} flexDirection=\"row\" mb={2} wrap=\"row nowrap\" size=\"md\" variant=\"ghost\">\n                                <TagLabel color={colorScale[i]}>\n                                    &nbsp;{labels[i]}: {dataToAdd}%\n                                </TagLabel>\n                            </Tag>\n                        ))}\n                    </Flex>\n                </Flex>\n            </Box>\n        </>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/Statistics.jsx",["412","413","414","415"],[],"import { Flex, Text, useColorModeValue, Card, Box, Tag, TagLabel } from '@chakra-ui/react'\n\nimport './Graphs.css'\n\nexport default function Statistics({ data, colorScale, labels }) {\n    const theme = useColorModeValue('dark', 'light')\n    return (\n        <>\n            <Box\n                w=\"100%\"\n                mr={2}\n                border={theme === 'light' ? 'solid 1px #474a54' : 'solid 1px #e2e8f0'}\n                borderRadius=\"6px\"\n            >\n                <Flex></Flex>\n            </Box>\n        </>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/form/FormPasswordField.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/nav/Logo.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/nav/ProfileMenu.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/search/SearchBar.jsx",["416","417","418","419","420"],["421"],"import { useEffect, useState } from 'react'\nimport { Center, Input, InputGroup, InputLeftAddon, InputRightAddon, IconButton, useMediaQuery } from '@chakra-ui/react'\nimport { SearchIcon } from '@chakra-ui/icons'\nimport { useSearchContext } from '../../context/SearchContext'\n\nexport default function SearchBar({ getSearchResults, isSearching }) {\n    const { filters, getAllPets } = useSearchContext()\n    const [isInputVisible, setIsInputVisible] = useState(false)\n    const [isSmallerThan750] = useMediaQuery('(max-width: 750px)')\n\n    useEffect(() => {\n        const awaitGetSearchResults = async () => await getAllPets()\n        awaitGetSearchResults() // eslint-disable-next-line\n    }, [])\n\n    const handleSearch = () => {}\n\n    return (\n        <Center>\n            <InputGroup>\n                <Input\n                    style={{\n                        width: isInputVisible ? '200px' : '0px',\n                        transition: 'all 0.5s ease',\n                    }}\n                    type=\"text\"\n                    placeholder=\"Search...\"\n                    borderTopRightRadius={0}\n                    borderBottomRightRadius={0}\n                    px={6}\n                    onKeyDown={(e) => (e.key === 'Enter' ? handleSearch() : null)}\n                />\n                <IconButton\n                    aria-label=\"Search\"\n                    icon={<SearchIcon />}\n                    borderTopLeftRadius={0}\n                    borderBottomLeftRadius={0}\n                    colorScheme=\"teal\"\n                    isLoading={isSearching}\n                    onClick={handleSearch}\n                />\n            </InputGroup>\n        </Center>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/PetActionsFull.jsx",["422","423","424","425"],[],"import { useState, useEffect, React } from 'react'\nimport { Text, Flex, Tooltip } from '@chakra-ui/react'\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder'\nimport TurnedInNotIcon from '@mui/icons-material/TurnedInNot'\nimport { useSearchContext } from '../../context/SearchContext'\nimport { useAuthContext } from '../../context/AuthContext'\nimport FavoriteIcon from '@mui/icons-material/Favorite'\nimport BookmarkIcon from '@mui/icons-material/Bookmark'\nimport { Spinner } from '@chakra-ui/react'\nimport './PetCardGrid.css'\nimport { useMediaQuery } from '@mui/material'\nimport PetButtonSM from './PetButtonSM'\nimport PetButtonStatus from './PetButtonStatus'\nexport default function PetActionsFull({ setCleanOfList, pet, status, tab, userInfoLikes }) {\n    const location = window.location.pathname.split('/')\n    const userLocation = location[location.length - 1]\n    const {\n        currentUser,\n        user_id,\n        isActiveSession,\n        petsUserAdopted,\n        petsUserFostered,\n        petsUserLiked,\n        petsUserSaved,\n        userLikedPet,\n        userSavedPet,\n        userUnsavedPet,\n    } = useAuthContext()\n\n    const { deletePet, updatingAdoptionStatus, addLike, returnPet } = useSearchContext()\n\n    const [adoptionStatus, setAdoptionStatus] = useState(status)\n    useEffect(() => {\n        setAdoptionStatus(status)\n    }, [status])\n\n    const [heart, setHeart] = useState(true)\n    const [save, setSave] = useState(true)\n\n    const handleLike = async () => {\n        console.log(userLocation)\n        if (userLocation !== 'search' && tab === 'liked') {\n            setTimeout(() => {\n                setCleanOfList(true)\n            }, 400)\n        }\n        console.log(pet)\n        console.log(pet.pet_id)\n        setHeart(!heart)\n        await userLikedPet(pet.pet_id, currentUser?.user?.user_id)\n        await addLike(user_id, pet.pet_id)\n    }\n\n    const handleDelete = async () => {\n        await deletePet(pet.pet_id, currentUser?.user?.user_id)\n    }\n\n    const handleSave = async () => {\n        setSave(!save)\n        console.log('IMAdeckisk')\n        await userSavedPet(currentUser?.user_id, pet.pet_id)\n    }\n\n    const handleUnsave = async () => {\n        if (userLocation !== 'search' && tab === 'saved') {\n            setTimeout(() => {\n                setCleanOfList(true)\n            }, 400)\n        }\n        setSave(!save)\n        await userUnsavedPet(currentUser?.user_id, pet.pet_id)\n    }\n\n    const handleAdoptionStatus = async (e) => {\n        if (userLocation !== 'search' && tab === 'fostered') {\n            setTimeout(() => {\n                setCleanOfList(true)\n            }, 400)\n        }\n        if (e.target.textContent === 'Foster') {\n            console.log(e.target.textContent)\n            setAdoptionStatus('Fostered')\n            await updatingAdoptionStatus(currentUser?.user_id, pet.pet_id, 'Fostered')\n        }\n        if (e.target.textContent == 'Adopt') {\n            setAdoptionStatus('Adopted')\n            await updatingAdoptionStatus(currentUser?.user_id, pet.pet_id, 'Adopted')\n        }\n    }\n\n    const handleReturn = async () => {\n        if (userLocation !== 'search' && tab === 'adopted') {\n            setTimeout(() => {\n                setCleanOfList(true)\n            }, 400)\n        }\n        console.log(\"I'm clicking to return this pet\")\n        setAdoptionStatus('Available')\n        await returnPet(currentUser?.user_id, pet.pet_id, status)\n    }\n    let isLiked = userInfoLikes && userInfoLikes?.some((users) => users.user_id === user_id)\n\n    return (\n        <Flex flexDir=\"column\" width=\"100%\">\n            <Flex w=\"100%\" wrap=\"wrap\" justify=\"start\" gap={2}>\n                {petsUserLiked === 0 && isActiveSession && (\n                    <Tooltip label={heart ? 'Unlike' : 'Like'} placement=\"bottom\">\n                        <PetButtonSM\n                            color={heart ? '#f78991' : ''}\n                            icon={!heart ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n                            action={handleLike}\n                        />\n                    </Tooltip>\n                )}\n                {petsUserLiked !== 0 && petsUserLiked?.includes(pet.pet_id) && isActiveSession ? (\n                    <Tooltip label={heart ? 'Unlike' : 'Like'} placement=\"bottom\">\n                        <PetButtonSM\n                            color={heart ? '#f78991' : ''}\n                            icon={heart ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n                            action={handleLike}\n                        />\n                    </Tooltip>\n                ) : (\n                    <Tooltip label={!heart ? 'Unlike' : 'Like'} placement=\"bottom\">\n                        <PetButtonSM\n                            color={!heart ? '#f78991' : ''}\n                            icon={!heart ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n                            action={handleLike}\n                        />\n                    </Tooltip>\n                )}\n                {petsUserSaved === 0 && isActiveSession && (\n                    <PetButtonSM label={save ? 'Unsave' : 'Save'} icon={<BookmarkIcon />} action={handleSave} />\n                )}\n                {petsUserSaved !== 0 && petsUserSaved?.includes(pet.pet_id) && isActiveSession ? (\n                    <PetButtonSM\n                        label={save ? 'Unsave' : 'Save'}\n                        icon={save ? <BookmarkIcon /> : <TurnedInNotIcon />}\n                        action={handleUnsave}\n                    />\n                ) : (\n                    <PetButtonSM\n                        label={!save ? 'Unsave' : 'Save'}\n                        icon={!save ? <BookmarkIcon /> : <TurnedInNotIcon />}\n                        action={handleSave}\n                    />\n                )}\n            </Flex>\n            <Flex>\n                {userInfoLikes?.length > 0 && isLiked ? (\n                    <Text fontSize=\"0.83rem\">\n                        <b>You</b> and{' '}\n                        {userInfoLikes?.length - 1 === 1\n                            ? 'one more person like this pet '\n                            : `${userInfoLikes?.length} more person like this pet`}\n                    </Text>\n                ) : (\n                    <Text display={!userInfoLikes || userInfoLikes?.length === 0 ? 'none' : ''} fontSize=\"0.83rem\">\n                        {userInfoLikes?.length} person like this pet\n                    </Text>\n                )}\n                {userInfoLikes?.length === 0 ||\n                    (userInfoLikes?.length === undefined && (\n                        <Text fontSize=\"0.83rem\">{`Be the first to show your love to ${pet.name} by liking it!`}</Text>\n                    ))}\n            </Flex>\n            <Flex w=\"100%\">\n                {isActiveSession && adoptionStatus === 'Adopted' && petsUserAdopted.includes(pet.pet_id) === true && (\n                    <PetButtonStatus label=\" Return\" onClick={handleReturn} />\n                )}\n                {isActiveSession && adoptionStatus === 'Adopted' && petsUserAdopted.includes(pet.pet_id) === false && (\n                    <Flex flexDirection=\"column\">\n                        <Tooltip\n                            label=\"Unfortunately, this pet is no longer available for adoption or fostering at the moment.\n                        However, you are more than welcome to save it in your and check back later to see if its\n                        status changes. Additionally, you can give it a like to increase its popularity these\n                        options are in our search page. There, you can enjoy and interact with the pets you like\n                        the most!\"\n                            position=\"bottom\"\n                        >\n                            <Text mt={4}>\n                                This pet is&nbsp;\n                                {/* <Box as=\"span\" color={petStatusColor(pet?.adoptionStatus)}> */}\n                                <b>Adopted</b>.<br />\n                                {/* </Box> */}\n                            </Text>\n                        </Tooltip>\n                        <Flex width=\"100%\">\n                            <PetButtonStatus mr={2} ml={0} label=\"Adopt\" isDisabled={true} />\n                            <PetButtonStatus mr={0} ml={2} label=\"Foster\" isDisabled={true} />\n                        </Flex>\n                    </Flex>\n                )}\n                {isActiveSession && adoptionStatus === 'Fostered' && petsUserFostered.includes(pet.pet_id) === true && (\n                    <Flex width=\"100%\">\n                        <PetButtonStatus\n                            mr={2}\n                            ml={0}\n                            label=\"Adopt\"\n                            labelTooltip={`Would you like to adopt ${pet.name}, who is currently available for adoption after being fostered?`}\n                            onClick={handleAdoptionStatus}\n                        />\n                        <PetButtonStatus mr={0} ml={2} label=\"Return\" onClick={handleReturn} />\n                    </Flex>\n                )}\n                {isActiveSession &&\n                    adoptionStatus === 'Fostered' &&\n                    petsUserFostered.includes(pet.pet_id) === false && (\n                        <PetButtonStatus label=\"Adopt\" onClick={handleAdoptionStatus} />\n                    )}\n                {isActiveSession && adoptionStatus === 'Available' && (\n                    <>\n                        <PetButtonStatus mr={2} ml={0} label=\"Adopt\" onClick={handleAdoptionStatus} />\n                        <PetButtonStatus mr={0} ml={2} label=\"Foster\" onClick={handleAdoptionStatus} />\n                    </>\n                )}\n            </Flex>\n        </Flex>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/PetTag.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/PetActionsGrid.jsx",["426","427","428","429","430"],[],"import { useState, useEffect, React } from 'react'\nimport { Text, Flex, Tooltip } from '@chakra-ui/react'\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder'\nimport TurnedInNotIcon from '@mui/icons-material/TurnedInNot'\nimport { useSearchContext } from '../../context/SearchContext'\nimport { useAuthContext } from '../../context/AuthContext'\nimport FavoriteIcon from '@mui/icons-material/Favorite'\nimport BookmarkIcon from '@mui/icons-material/Bookmark'\nimport { Spinner } from '@chakra-ui/react'\nimport './PetCardGrid.css'\nimport { useMediaQuery } from '@mui/material'\nimport PetButtonSM from './PetButtonSM'\nimport PetButtonStatus from './PetButtonStatus'\nexport default function PetActionsGrid({ setCleanOfList, pet, status, tab, userInfoLikes }) {\n    const location = window.location.pathname.split('/')\n    const userLocation = location[location.length - 1]\n    const {\n        currentUser,\n        user_id,\n        isActiveSession,\n        petsUserAdopted,\n        petsUserFostered,\n        petsUserLiked,\n        petsUserSaved,\n        userLikedPet,\n        userSavedPet,\n        userUnsavedPet,\n    } = useAuthContext()\n\n    const { deletePet, updatingAdoptionStatus, addLike, returnPet } = useSearchContext()\n\n    // useEffect(() => {\n    //     setAdoptionStatus(status)\n    // }, [status])\n\n    const [newAdoptionStatus, setNewAdoptionStatus] = useState(status)\n    const [heart, setHeart] = useState(true)\n    const [save, setSave] = useState(true)\n\n    const handleLike = async () => {\n        console.log(userLocation)\n        if (userLocation !== 'search' && tab === 'liked') {\n            setTimeout(() => {\n                setCleanOfList(true)\n            }, 400)\n        }\n        console.log(pet)\n        console.log(pet.pet_id)\n        setHeart(!heart)\n        await userLikedPet(pet.pet_id, currentUser?.user?.user_id)\n        await addLike(user_id, pet.pet_id)\n    }\n\n    const handleDelete = async () => {\n        await deletePet(pet.pet_id, currentUser?.user?.user_id)\n    }\n\n    const handleSave = async () => {\n        setSave(!save)\n        await userSavedPet(currentUser?.user_id, pet.pet_id)\n    }\n\n    const handleUnsave = async () => {\n        if (userLocation !== 'search' && tab === 'saved') {\n            setTimeout(() => {\n                setCleanOfList(true)\n            }, 400)\n        }\n        setSave(!save)\n        await userUnsavedPet(currentUser?.user_id, pet.pet_id)\n    }\n\n    const handleAdoptionStatus = async (e) => {\n        if (userLocation !== 'search' && tab === 'fostered') {\n            setTimeout(() => {\n                setCleanOfList(true)\n            }, 400)\n        }\n        if (e.target.textContent === 'Foster') {\n            console.log(e.target.textContent)\n            setNewAdoptionStatus('Fostered')\n            // setAdoptionStatus('Fostered')\n            await updatingAdoptionStatus(currentUser?.user_id, pet.pet_id, 'Fostered')\n        }\n        if (e.target.textContent == 'Adopt') {\n            setNewAdoptionStatus('Adopted')\n            // setAdoptionStatus('Adopted')\n            await updatingAdoptionStatus(currentUser?.user_id, pet.pet_id, 'Adopted')\n        }\n    }\n\n    const handleReturn = async () => {\n        if (userLocation !== 'search' && tab === 'adopted') {\n            setTimeout(() => {\n                setCleanOfList(true)\n            }, 400)\n        }\n        console.log(\"I'm clicking to return this pet\")\n        setNewAdoptionStatus('Available')\n        // setAdoptionStatus('Available')\n        await returnPet(currentUser?.user_id, pet.pet_id, status)\n    }\n\n    let isLiked = userInfoLikes && userInfoLikes.some((users) => users.user_id === user_id)\n\n    return (\n        <Flex flexDir=\"column\" width=\"100%\">\n            <Flex w=\"100%\" wrap=\"wrap\" justify=\"start\" gap={2}>\n                {petsUserLiked === 0 && isActiveSession && (\n                    <Tooltip label={heart ? 'Unlike' : 'Like'} placement=\"bottom\">\n                        <PetButtonSM\n                            color={heart ? '#f78991' : ''}\n                            icon={!heart ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n                            action={handleLike}\n                        />\n                    </Tooltip>\n                )}\n                {petsUserLiked !== 0 && petsUserLiked?.includes(pet.pet_id) && isActiveSession ? (\n                    <Tooltip label={heart ? 'Unlike' : 'Like'} placement=\"bottom\">\n                        <PetButtonSM\n                            color={heart ? '#f78991' : ''}\n                            icon={heart ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n                            action={handleLike}\n                        />\n                    </Tooltip>\n                ) : (\n                    <Tooltip label={!heart ? 'Unlike' : 'Like'} placement=\"bottom\">\n                        <PetButtonSM\n                            color={!heart ? '#f78991' : ''}\n                            icon={!heart ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n                            action={handleLike}\n                        />\n                    </Tooltip>\n                )}\n                {petsUserSaved === 0 && isActiveSession && (\n                    <PetButtonSM label={save ? 'Unsave' : 'Save'} icon={<BookmarkIcon />} action={handleSave} />\n                )}\n                {petsUserSaved !== 0 && petsUserSaved?.includes(pet.pet_id) && isActiveSession ? (\n                    <PetButtonSM\n                        label={save ? 'Unsave' : 'Save'}\n                        icon={save ? <BookmarkIcon /> : <TurnedInNotIcon />}\n                        action={handleUnsave}\n                    />\n                ) : (\n                    <PetButtonSM\n                        label={!save ? 'Unsave' : 'Save'}\n                        icon={!save ? <BookmarkIcon /> : <TurnedInNotIcon />}\n                        action={handleSave}\n                    />\n                )}\n            </Flex>\n            <Flex>\n                {userInfoLikes?.length > 0 && isLiked ? (\n                    <Text fontSize=\"0.83rem\">\n                        <b>You</b> and{' '}\n                        {userInfoLikes?.length - 1 === 1\n                            ? 'one more person like this pet '\n                            : `${userInfoLikes?.length} more person like this pet`}\n                    </Text>\n                ) : (\n                    <Text display={!userInfoLikes || userInfoLikes?.length === 0 ? 'none' : ''} fontSize=\"0.83rem\">\n                        {userInfoLikes?.length} person like this pet\n                    </Text>\n                )}\n                {userInfoLikes?.length === 0 ||\n                    (userInfoLikes?.length === undefined && (\n                        <Text fontSize=\"0.83rem\">{`Be the first to show your love to ${pet.name} by liking it!`}</Text>\n                    ))}\n            </Flex>\n            <Flex w=\"100%\">\n                {isActiveSession &&\n                    newAdoptionStatus === 'Adopted' &&\n                    petsUserAdopted.includes(pet.pet_id) === true && (\n                        <PetButtonStatus label=\" Return\" onClick={handleReturn} />\n                    )}\n\n                {isActiveSession && newAdoptionStatus === 'Adopted' && petsUserAdopted.includes(pet.pet_id) === false && (\n                    <Flex width=\"100%\">\n                        <PetButtonStatus mr={2} ml={0} label=\"Adopt\" isDisabled={true} />\n                        <PetButtonStatus mr={0} ml={2} label=\"Foster\" isDisabled={true} />\n                    </Flex>\n                )}\n                {isActiveSession && newAdoptionStatus === 'Fostered' && petsUserFostered.includes(pet.pet_id) === true && (\n                    <Flex width=\"100%\">\n                        <PetButtonStatus\n                            mr={2}\n                            ml={0}\n                            label=\"Adopt\"\n                            labelTooltip={`Would you like to adopt ${pet.name}, who is currently available for adoption after being fostered?`}\n                            onClick={handleAdoptionStatus}\n                        />\n                        <PetButtonStatus mr={0} ml={2} label=\"Return\" onClick={handleReturn} />\n                    </Flex>\n                )}\n                {isActiveSession &&\n                    newAdoptionStatus === 'Fostered' &&\n                    petsUserFostered.includes(pet.pet_id) === false && (\n                        <PetButtonStatus label=\"Adopt\" onClick={handleAdoptionStatus} />\n                    )}\n\n                {isActiveSession && newAdoptionStatus === 'Available' && (\n                    <>\n                        <PetButtonStatus mr={2} ml={0} label=\"Adopt\" onClick={handleAdoptionStatus} />\n                        <PetButtonStatus mr={0} ml={2} label=\"Foster\" onClick={handleAdoptionStatus} />\n                    </>\n                )}\n            </Flex>\n        </Flex>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/registration/RegistrationModal.jsx",["431","432","433"],[],"import React from 'react'\nimport { useAuthContext } from '../../context/AuthContext'\nimport { Modal, ModalOverlay, ModalContent, ModalBody, ModalCloseButton, Flex, Link } from '@chakra-ui/react'\nimport LoginImage from './LoginImage'\nimport Resgistration from './Resgistration'\nimport { useDisclosure } from '@chakra-ui/react'\nexport default function RegistrationModal({ isOpen, toggleModal }) {\n    return (\n        <>\n            <Modal isOpen={isOpen} onClose={() => toggleModal()} style={{ padding: 0, margin: 0 }}>\n                <ModalOverlay />\n                <ModalContent maxW=\"45rem\">\n                    <ModalCloseButton />\n                    <ModalBody style={{ padding: 0, margin: 0 }}>\n                        <Flex m={0} p={0}>\n                            <LoginImage />\n                            <Resgistration toggleModal={toggleModal} />\n                        </Flex>\n                    </ModalBody>\n                </ModalContent>\n            </Modal>\n        </>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/TableDataPets.jsx",["434"],[],"import { useMemo, usenae } from 'react'\nimport { Link } from '@chakra-ui/react'\nimport { LinkIcon } from '@chakra-ui/icons'\nimport { NavLink } from 'react-router-dom'\nimport DashboardTable from './DashboardTable'\nimport { petStatusColor } from '../../utils/globals'\nimport { Avatar } from '@chakra-ui/react'\n\nexport default function TableDataPets({ pets }) {\n    const data = useMemo(() => {\n        return (pets || []).map((pet) => {\n            return {\n                picture: pet.picture,\n                name: pet.name,\n                type: pet.type,\n                status: pet.adoptionStatus,\n                date: pet.created_at,\n                id: pet.pet_id,\n            }\n        })\n    }, [pets])\n\n    const columns = useMemo(\n        () => [\n            {\n                Header: 'Pet',\n                accessor: 'picture',\n                Cell: (e) => <Avatar src={e.value} />,\n            },\n            {\n                Header: 'Name',\n                accessor: 'name',\n                Cell: (e) => (\n                    <Link as={NavLink} to={`pet/${e.row.original.id}`}>\n                        <LinkIcon mr={2} />\n                        {e.value}\n                    </Link>\n                ),\n            },\n            { Header: 'Type', accessor: 'type' },\n            {\n                Header: 'Status',\n                accessor: 'status',\n                Cell: (e) => (\n                    <span style={petStatusColor(e.value)} className=\"small-caps\">\n                        {e.value}\n                    </span>\n                ),\n            },\n            {\n                Header: 'Created',\n                accessor: 'date',\n                Cell: (e) => <span>{new Date(e.value).toLocaleString().slice(0, 9)}</span>,\n            },\n        ],\n        []\n    )\n\n    return <DashboardTable data={data} columns={columns} />\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/TableDataUsers.jsx",["435"],[],"import { useMemo } from 'react'\nimport { Link } from '@chakra-ui/react'\nimport { LinkIcon } from '@chakra-ui/icons'\nimport { NavLink } from 'react-router-dom'\nimport DashboardTable from './DashboardTable'\nimport { userRoleColor } from '../../utils/globals'\nimport { Avatar } from '@chakra-ui/react'\n\nexport default function TableDataUsers({ users }) {\n    const data = useMemo(\n        () =>\n            users.map((user) => {\n                return {\n                    user: <Avatar src={user.picture} />,\n                    name: user.name,\n                    email: user.email,\n                    role: user.role,\n                    date: user.created_at,\n                    id: user._id,\n                }\n            }),\n        []\n    )\n\n    const columns = useMemo(\n        () => [\n            {\n                Header: 'User',\n                accessor: 'user',\n                Cell: (e) => (\n                    <Link as={NavLink} to={`user/${e.row.original.id}`}>\n                        {e.value}\n                    </Link>\n                ),\n            },\n            {\n                Header: 'Name',\n                accessor: 'name',\n                Cell: (e) => (\n                    <Link as={NavLink} to={`user/${e.row.original.id}`}>\n                        <LinkIcon mr={2} />\n                        {e.value}\n                    </Link>\n                ),\n            },\n            {\n                Header: 'E-Mail',\n                accessor: 'email',\n                Cell: (e) => <Link href={`mailto:${e.value}`}>{e.value}</Link>,\n            },\n            {\n                Header: 'Role',\n                accessor: 'role',\n                Cell: (e) => {\n                    if (e.value === 1) {\n                        return (\n                            <span style={userRoleColor(e.value)} className=\"small-caps\">\n                                Admin\n                            </span>\n                        )\n                    } else\n                        return (\n                            <span style={userRoleColor(e.value)} className=\"small-caps\">\n                                User\n                            </span>\n                        )\n                },\n            },\n            {\n                Header: 'Created',\n                accessor: 'date',\n                Cell: (e) => <span>{new Date(e.value).getFullYear}</span>,\n            },\n        ],\n        []\n    )\n\n    return <DashboardTable data={data} columns={columns} />\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/nav/Logout.jsx",["436"],[],"import { Button, Flex } from '@chakra-ui/react'\nimport { useNavigate } from 'react-router-dom'\nimport { Post, PostReq } from '../../utils/api'\nimport { useAuthContext } from '../../context/AuthContext'\n\nexport default function Logout() {\n    const { clearCurrentUser } = useAuthContext()\n    let navigate = useNavigate()\n\n    const handleLogout = async () => {\n        try {\n            console.log('here')\n            const res = await PostReq('/logout', {})\n\n            if (res.ok) {\n                clearCurrentUser()\n                navigate('/')\n            }\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    return (\n        <Flex placeContent=\"end\">\n            <Button mr={3} mt={2} size=\"sm\" colorScheme=\"blue\" onClick={handleLogout}>\n                Log Out\n            </Button>\n        </Flex>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/PetButtonStatus.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/pet/PetButtonSM.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/registration/LoginImage.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/registration/Resgistration.jsx",[],[],"/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/Admin/DashboardTable.jsx",["437"],[],"import React from 'react'\nimport { Table, Thead, Tbody, Tr, Th, Td, Flex, Avatar } from '@chakra-ui/react'\nimport { TriangleDownIcon, TriangleUpIcon } from '@chakra-ui/icons'\nimport { useTable, useSortBy } from 'react-table'\n\nexport default function DashboardTable({ columns, data }) {\n    const caseInsensitiveSort = (row1, row2) => {\n        let r1 = row1 ? row1.toLowerCase() : ''\n        let r2 = row2 ? row2.toLowerCase() : ''\n\n        if (r1 < r2) return -1\n        if (r1 > r2) return 1\n        return 0\n    }\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable(\n        {\n            columns,\n            data,\n            initialState: { sortBy: [{ id: 'name', desc: false }] },\n            sortTypes: {\n                alphanumeric: (row1, row2, name) => {\n                    if (name === 'picture') {\n                        return 0\n                    } else {\n                        return caseInsensitiveSort(row1.values[name], row2.values[name])\n                    }\n                },\n            },\n            disableSortRemove: true,\n        },\n        useSortBy\n    )\n\n    return (\n        <Table size=\"md\" variant=\"simple\" colorScheme=\"blackAlpha\" fontSize=\"1rem\" mt={8} {...getTableProps()}>\n            <Thead>\n                {headerGroups.map((headerGroup) => (\n                    <Tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map((column) => (\n                            <Th\n                                {...column.getHeaderProps(\n                                    column.getSortByToggleProps({ title: `Sort by ${column.Header}` })\n                                )}\n                            >\n                                <Flex align=\"center\" wrap=\"nowrap\" gap={2} w=\"6rem\">\n                                    {column.render('Header')}\n                                    {column.isSorted ? (\n                                        column.isSortedDesc ? (\n                                            <TriangleDownIcon />\n                                        ) : (\n                                            <TriangleUpIcon />\n                                        )\n                                    ) : null}\n                                </Flex>\n                            </Th>\n                        ))}\n                    </Tr>\n                ))}\n            </Thead>\n            <Tbody {...getTableBodyProps()}>\n                {rows.map((row) => {\n                    prepareRow(row)\n                    return (\n                        <Tr {...row.getRowProps()}>\n                            {row.cells.map((cell) => (\n                                <Td {...cell.getCellProps()}>{cell.render('Cell')}</Td>\n                            ))}\n                        </Tr>\n                    )\n                })}\n            </Tbody>\n        </Table>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/registration/Singup.jsx",["438","439"],[],"import { React, useState } from 'react'\nimport * as yup from 'yup'\nimport { requiredField, telRegExp } from '../../utils/globals'\nimport FormInputField from '../form/FormInputField'\nimport FormSubmitButtom from '../form/FormSubmitButtom'\nimport FormPasswordField from '../form/FormPasswordField'\nimport { Formik } from 'formik'\nimport { PostReq } from '../../utils/api'\nimport { useToast } from '@chakra-ui/react'\nimport { useAuthContext } from '../../context/AuthContext'\n\nexport default function Singup({ toggleModal }) {\n    const [serverError, setServerError] = useState('')\n\n    const toast = useToast({\n        title: 'Profile created!',\n        description: 'You can already log in.',\n        status: 'success',\n        duration: 6000,\n        isClosable: true,\n        position: 'top',\n    })\n\n    const singupSchema = yup.object().shape({\n        firstname: yup.string().required(requiredField).min(3, 'Name must be at least 3 characters.'),\n        lastname: yup.string().min(3, 'Name must be at least 3 characters.'),\n        email: yup.string().required(requiredField),\n        password: yup.string().required(requiredField).min(8, 'Password must be at least 8 characters.'),\n        repeatpassword: yup\n            .string()\n            .required(requiredField)\n            .oneOf([yup.ref('password')], 'Passwords must match.'),\n        phonenumber: yup.string().matches(telRegExp, 'Invalid phone number.'),\n    })\n\n    return (\n        <Formik\n            initialValues={{\n                firstname: '',\n                lastname: '',\n                email: '',\n                password: '',\n                repeatpassword: '',\n                phonenumber: '',\n            }}\n            validationSchema={singupSchema}\n            validateOnChange={false}\n            onSubmit={async (newUser, { resetForm }) => {\n                try {\n                    setServerError('')\n                    const res = await PostReq('/user/signup/', newUser)\n                    if (res) {\n                        toast()\n                        resetForm()\n                        toggleModal()\n                    }\n\n                    console.log(newUser)\n                } catch (error) {}\n            }}\n        >\n            {({ handleSubmit }) => (\n                <form onSubmit={handleSubmit}>\n                    <FormInputField req={true} fieldName=\"firstname\" fieldLabel=\"First Name\" />\n                    <FormInputField req={false} fieldName=\"lastname\" fieldLabel=\"Last Name\" />\n                    <FormInputField req={true} fieldName=\"email\" fieldLabel=\"Email\" />\n                    <FormPasswordField req={true} fieldName=\"password\" fieldLabel=\"Password\" />\n                    <FormPasswordField req={true} fieldName=\"repeatpassword\" fieldLabel=\"Confirm Password\" />\n                    <FormInputField req={false} fieldName=\"phonenumber\" fieldLabel=\"Phone Number\" />\n                    <FormSubmitButtom buttonLabel=\"Sing Up\" />\n                </form>\n            )}\n        </Formik>\n    )\n}\n","/Users/manumurillo/Downloads/petsgram_adoption/client/src/components/registration/LoginForm.jsx",[],[],{"ruleId":"440","severity":1,"message":"441","line":1,"column":58,"nodeType":"442","messageId":"443","endLine":1,"endColumn":68},{"ruleId":"440","severity":1,"message":"441","line":1,"column":58,"nodeType":"442","messageId":"443","endLine":1,"endColumn":68},{"ruleId":"440","severity":1,"message":"444","line":2,"column":51,"nodeType":"442","messageId":"443","endLine":2,"endColumn":57},{"ruleId":"445","severity":1,"message":"446","line":53,"column":8,"nodeType":"447","endLine":53,"endColumn":10,"suggestions":"448"},{"ruleId":"445","severity":1,"message":"449","line":58,"column":8,"nodeType":"447","endLine":58,"endColumn":10,"suggestions":"450"},{"ruleId":"440","severity":1,"message":"451","line":134,"column":19,"nodeType":"442","messageId":"443","endLine":134,"endColumn":22},{"ruleId":"440","severity":1,"message":"452","line":1,"column":27,"nodeType":"442","messageId":"443","endLine":1,"endColumn":36},{"ruleId":"440","severity":1,"message":"453","line":11,"column":3,"nodeType":"442","messageId":"443","endLine":11,"endColumn":7},{"ruleId":"440","severity":1,"message":"454","line":17,"column":10,"nodeType":"442","messageId":"443","endLine":17,"endColumn":16},{"ruleId":"440","severity":1,"message":"455","line":17,"column":18,"nodeType":"442","messageId":"443","endLine":17,"endColumn":25},{"ruleId":"440","severity":1,"message":"452","line":2,"column":10,"nodeType":"442","messageId":"443","endLine":2,"endColumn":19},{"ruleId":"440","severity":1,"message":"454","line":5,"column":10,"nodeType":"442","messageId":"443","endLine":5,"endColumn":16},{"ruleId":"440","severity":1,"message":"455","line":5,"column":18,"nodeType":"442","messageId":"443","endLine":5,"endColumn":25},{"ruleId":"440","severity":1,"message":"456","line":7,"column":8,"nodeType":"442","messageId":"443","endLine":7,"endColumn":13},{"ruleId":"440","severity":1,"message":"453","line":9,"column":3,"nodeType":"442","messageId":"443","endLine":9,"endColumn":7},{"ruleId":"440","severity":1,"message":"457","line":12,"column":8,"nodeType":"442","messageId":"443","endLine":12,"endColumn":27},{"ruleId":"440","severity":1,"message":"454","line":13,"column":10,"nodeType":"442","messageId":"443","endLine":13,"endColumn":16},{"ruleId":"440","severity":1,"message":"455","line":13,"column":18,"nodeType":"442","messageId":"443","endLine":13,"endColumn":25},{"ruleId":"440","severity":1,"message":"458","line":17,"column":8,"nodeType":"442","messageId":"443","endLine":17,"endColumn":20},{"ruleId":"440","severity":1,"message":"459","line":22,"column":5,"nodeType":"442","messageId":"443","endLine":22,"endColumn":16},{"ruleId":"445","severity":1,"message":"460","line":47,"column":6,"nodeType":"447","endLine":47,"endColumn":8,"suggestions":"461"},{"ruleId":"440","severity":1,"message":"462","line":2,"column":51,"nodeType":"442","messageId":"443","endLine":2,"endColumn":55},{"ruleId":"440","severity":1,"message":"463","line":3,"column":10,"nodeType":"442","messageId":"443","endLine":3,"endColumn":17},{"ruleId":"440","severity":1,"message":"464","line":2,"column":10,"nodeType":"442","messageId":"443","endLine":2,"endColumn":14},{"ruleId":"440","severity":1,"message":"465","line":2,"column":16,"nodeType":"442","messageId":"443","endLine":2,"endColumn":19},{"ruleId":"440","severity":1,"message":"466","line":2,"column":21,"nodeType":"442","messageId":"443","endLine":2,"endColumn":27},{"ruleId":"440","severity":1,"message":"467","line":5,"column":10,"nodeType":"442","messageId":"443","endLine":5,"endColumn":26},{"ruleId":"445","severity":1,"message":"468","line":28,"column":8,"nodeType":"447","endLine":28,"endColumn":10,"suggestions":"469"},{"ruleId":"440","severity":1,"message":"467","line":14,"column":10,"nodeType":"442","messageId":"443","endLine":14,"endColumn":26},{"ruleId":"440","severity":1,"message":"464","line":3,"column":23,"nodeType":"442","messageId":"443","endLine":3,"endColumn":27},{"ruleId":"440","severity":1,"message":"470","line":11,"column":10,"nodeType":"442","messageId":"443","endLine":11,"endColumn":24},{"ruleId":"445","severity":1,"message":"471","line":43,"column":8,"nodeType":"447","endLine":43,"endColumn":10,"suggestions":"472"},{"ruleId":"440","severity":1,"message":"473","line":47,"column":25,"nodeType":"442","messageId":"443","endLine":47,"endColumn":39},{"ruleId":"440","severity":1,"message":"474","line":9,"column":8,"nodeType":"442","messageId":"443","endLine":9,"endColumn":18},{"ruleId":"445","severity":1,"message":"475","line":45,"column":8,"nodeType":"447","endLine":45,"endColumn":10,"suggestions":"476","suppressions":"477"},{"ruleId":"440","severity":1,"message":"478","line":2,"column":32,"nodeType":"442","messageId":"443","endLine":2,"endColumn":41},{"ruleId":"440","severity":1,"message":"479","line":3,"column":10,"nodeType":"442","messageId":"443","endLine":3,"endColumn":25},{"ruleId":"440","severity":1,"message":"480","line":3,"column":27,"nodeType":"442","messageId":"443","endLine":3,"endColumn":37},{"ruleId":"440","severity":1,"message":"481","line":4,"column":10,"nodeType":"442","messageId":"443","endLine":4,"endColumn":19},{"ruleId":"440","severity":1,"message":"482","line":6,"column":8,"nodeType":"442","messageId":"443","endLine":6,"endColumn":23},{"ruleId":"440","severity":1,"message":"483","line":9,"column":8,"nodeType":"442","messageId":"443","endLine":9,"endColumn":24},{"ruleId":"445","severity":1,"message":"484","line":44,"column":8,"nodeType":"447","endLine":44,"endColumn":17,"suggestions":"485"},{"ruleId":"440","severity":1,"message":"486","line":1,"column":10,"nodeType":"442","messageId":"443","endLine":1,"endColumn":18},{"ruleId":"440","severity":1,"message":"478","line":10,"column":5,"nodeType":"442","messageId":"443","endLine":10,"endColumn":14},{"ruleId":"440","severity":1,"message":"487","line":12,"column":5,"nodeType":"442","messageId":"443","endLine":12,"endColumn":18},{"ruleId":"440","severity":1,"message":"458","line":19,"column":8,"nodeType":"442","messageId":"443","endLine":19,"endColumn":20},{"ruleId":"445","severity":1,"message":"488","line":41,"column":8,"nodeType":"447","endLine":41,"endColumn":42,"suggestions":"489"},{"ruleId":"440","severity":1,"message":"452","line":1,"column":27,"nodeType":"442","messageId":"443","endLine":1,"endColumn":36},{"ruleId":"440","severity":1,"message":"490","line":15,"column":26,"nodeType":"442","messageId":"443","endLine":15,"endColumn":32},{"ruleId":"440","severity":1,"message":"491","line":9,"column":8,"nodeType":"442","messageId":"443","endLine":9,"endColumn":17},{"ruleId":"440","severity":1,"message":"492","line":10,"column":8,"nodeType":"442","messageId":"443","endLine":10,"endColumn":21},{"ruleId":"440","severity":1,"message":"493","line":1,"column":38,"nodeType":"442","messageId":"443","endLine":1,"endColumn":44},{"ruleId":"440","severity":1,"message":"494","line":1,"column":46,"nodeType":"442","messageId":"443","endLine":1,"endColumn":61},{"ruleId":"440","severity":1,"message":"495","line":4,"column":5,"nodeType":"442","messageId":"443","endLine":4,"endColumn":15},{"ruleId":"440","severity":1,"message":"496","line":5,"column":5,"nodeType":"442","messageId":"443","endLine":5,"endColumn":13},{"ruleId":"440","severity":1,"message":"497","line":8,"column":5,"nodeType":"442","messageId":"443","endLine":8,"endColumn":11},{"ruleId":"440","severity":1,"message":"465","line":10,"column":5,"nodeType":"442","messageId":"443","endLine":10,"endColumn":8},{"ruleId":"440","severity":1,"message":"498","line":14,"column":5,"nodeType":"442","messageId":"443","endLine":14,"endColumn":15},{"ruleId":"440","severity":1,"message":"499","line":15,"column":5,"nodeType":"442","messageId":"443","endLine":15,"endColumn":12},{"ruleId":"440","severity":1,"message":"500","line":16,"column":5,"nodeType":"442","messageId":"443","endLine":16,"endColumn":8},{"ruleId":"440","severity":1,"message":"501","line":17,"column":5,"nodeType":"442","messageId":"443","endLine":17,"endColumn":13},{"ruleId":"440","severity":1,"message":"502","line":25,"column":8,"nodeType":"442","messageId":"443","endLine":25,"endColumn":23},{"ruleId":"440","severity":1,"message":"467","line":26,"column":10,"nodeType":"442","messageId":"443","endLine":26,"endColumn":26},{"ruleId":"440","severity":1,"message":"470","line":27,"column":10,"nodeType":"442","messageId":"443","endLine":27,"endColumn":24},{"ruleId":"440","severity":1,"message":"503","line":28,"column":8,"nodeType":"442","messageId":"443","endLine":28,"endColumn":20},{"ruleId":"440","severity":1,"message":"504","line":29,"column":8,"nodeType":"442","messageId":"443","endLine":29,"endColumn":21},{"ruleId":"440","severity":1,"message":"505","line":30,"column":8,"nodeType":"442","messageId":"443","endLine":30,"endColumn":20},{"ruleId":"440","severity":1,"message":"506","line":31,"column":10,"nodeType":"442","messageId":"443","endLine":31,"endColumn":17},{"ruleId":"440","severity":1,"message":"507","line":33,"column":10,"nodeType":"442","messageId":"443","endLine":33,"endColumn":21},{"ruleId":"440","severity":1,"message":"508","line":36,"column":10,"nodeType":"442","messageId":"443","endLine":36,"endColumn":25},{"ruleId":"440","severity":1,"message":"509","line":37,"column":8,"nodeType":"442","messageId":"443","endLine":37,"endColumn":22},{"ruleId":"440","severity":1,"message":"510","line":44,"column":12,"nodeType":"442","messageId":"443","endLine":44,"endColumn":26},{"ruleId":"440","severity":1,"message":"511","line":6,"column":3,"nodeType":"442","messageId":"443","endLine":6,"endColumn":18},{"ruleId":"440","severity":1,"message":"512","line":8,"column":18,"nodeType":"442","messageId":"443","endLine":8,"endColumn":23},{"ruleId":"440","severity":1,"message":"464","line":1,"column":10,"nodeType":"442","messageId":"443","endLine":1,"endColumn":14},{"ruleId":"440","severity":1,"message":"453","line":1,"column":16,"nodeType":"442","messageId":"443","endLine":1,"endColumn":20},{"ruleId":"440","severity":1,"message":"513","line":1,"column":41,"nodeType":"442","messageId":"443","endLine":1,"endColumn":45},{"ruleId":"440","severity":1,"message":"500","line":1,"column":52,"nodeType":"442","messageId":"443","endLine":1,"endColumn":55},{"ruleId":"440","severity":1,"message":"501","line":1,"column":57,"nodeType":"442","messageId":"443","endLine":1,"endColumn":65},{"ruleId":"440","severity":1,"message":"514","line":5,"column":10,"nodeType":"442","messageId":"443","endLine":5,"endColumn":22},{"ruleId":"440","severity":1,"message":"515","line":4,"column":15,"nodeType":"442","messageId":"443","endLine":4,"endColumn":27},{"ruleId":"440","severity":1,"message":"516","line":5,"column":108,"nodeType":"442","messageId":"443","endLine":5,"endColumn":122},{"ruleId":"517","severity":1,"message":"518","line":21,"column":9,"nodeType":"519","endLine":21,"endColumn":36},{"ruleId":"440","severity":1,"message":"453","line":1,"column":16,"nodeType":"442","messageId":"443","endLine":1,"endColumn":20},{"ruleId":"440","severity":1,"message":"513","line":1,"column":41,"nodeType":"442","messageId":"443","endLine":1,"endColumn":45},{"ruleId":"440","severity":1,"message":"453","line":1,"column":16,"nodeType":"442","messageId":"443","endLine":1,"endColumn":20},{"ruleId":"440","severity":1,"message":"513","line":1,"column":41,"nodeType":"442","messageId":"443","endLine":1,"endColumn":45},{"ruleId":"440","severity":1,"message":"500","line":1,"column":52,"nodeType":"442","messageId":"443","endLine":1,"endColumn":55},{"ruleId":"440","severity":1,"message":"501","line":1,"column":57,"nodeType":"442","messageId":"443","endLine":1,"endColumn":65},{"ruleId":"440","severity":1,"message":"520","line":2,"column":37,"nodeType":"442","messageId":"443","endLine":2,"endColumn":51},{"ruleId":"440","severity":1,"message":"521","line":2,"column":53,"nodeType":"442","messageId":"443","endLine":2,"endColumn":68},{"ruleId":"440","severity":1,"message":"522","line":7,"column":13,"nodeType":"442","messageId":"443","endLine":7,"endColumn":20},{"ruleId":"440","severity":1,"message":"523","line":8,"column":28,"nodeType":"442","messageId":"443","endLine":8,"endColumn":45},{"ruleId":"440","severity":1,"message":"524","line":9,"column":12,"nodeType":"442","messageId":"443","endLine":9,"endColumn":28},{"ruleId":"445","severity":1,"message":"525","line":14,"column":8,"nodeType":"447","endLine":14,"endColumn":10,"suggestions":"526","suppressions":"527"},{"ruleId":"440","severity":1,"message":"506","line":9,"column":10,"nodeType":"442","messageId":"443","endLine":9,"endColumn":17},{"ruleId":"440","severity":1,"message":"487","line":11,"column":10,"nodeType":"442","messageId":"443","endLine":11,"endColumn":23},{"ruleId":"440","severity":1,"message":"528","line":54,"column":11,"nodeType":"442","messageId":"443","endLine":54,"endColumn":23},{"ruleId":"529","severity":1,"message":"530","line":85,"column":34,"nodeType":"531","messageId":"532","endLine":85,"endColumn":36},{"ruleId":"440","severity":1,"message":"452","line":1,"column":20,"nodeType":"442","messageId":"443","endLine":1,"endColumn":29},{"ruleId":"440","severity":1,"message":"506","line":9,"column":10,"nodeType":"442","messageId":"443","endLine":9,"endColumn":17},{"ruleId":"440","severity":1,"message":"487","line":11,"column":10,"nodeType":"442","messageId":"443","endLine":11,"endColumn":23},{"ruleId":"440","severity":1,"message":"528","line":54,"column":11,"nodeType":"442","messageId":"443","endLine":54,"endColumn":23},{"ruleId":"529","severity":1,"message":"530","line":85,"column":34,"nodeType":"531","messageId":"532","endLine":85,"endColumn":36},{"ruleId":"440","severity":1,"message":"470","line":2,"column":10,"nodeType":"442","messageId":"443","endLine":2,"endColumn":24},{"ruleId":"440","severity":1,"message":"462","line":3,"column":80,"nodeType":"442","messageId":"443","endLine":3,"endColumn":84},{"ruleId":"440","severity":1,"message":"533","line":6,"column":10,"nodeType":"442","messageId":"443","endLine":6,"endColumn":23},{"ruleId":"440","severity":1,"message":"534","line":1,"column":19,"nodeType":"442","messageId":"443","endLine":1,"endColumn":25},{"ruleId":"445","severity":1,"message":"535","line":22,"column":9,"nodeType":"447","endLine":22,"endColumn":11,"suggestions":"536"},{"ruleId":"440","severity":1,"message":"537","line":3,"column":10,"nodeType":"442","messageId":"443","endLine":3,"endColumn":14},{"ruleId":"440","severity":1,"message":"538","line":2,"column":49,"nodeType":"442","messageId":"443","endLine":2,"endColumn":55},{"ruleId":"440","severity":1,"message":"470","line":10,"column":10,"nodeType":"442","messageId":"443","endLine":10,"endColumn":24},{"ruleId":"440","severity":1,"message":"539","line":13,"column":12,"nodeType":"442","messageId":"443","endLine":13,"endColumn":23},"no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","'PutReq' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'toggleAdvancedSearch'. Either include it or remove the dependency array.","ArrayExpression",["540"],"React Hook useEffect has a missing dependency: 'getUserLikes'. Either include it or remove the dependency array.",["541"],"'res' is assigned a value but never used.","'useEffect' is defined but never used.","'Text' is defined but never used.","'GetReq' is defined but never used.","'PostReq' is defined but never used.","'axios' is defined but never used.","'SocialMediaViewPets' is defined but never used.","'SearchToggle' is defined but never used.","'currentUser' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllPets', 'getCurrentUser', 'petsUserFostered', and 'user_id'. Either include them or remove the dependency array.",["542"],"'Link' is defined but never used.","'NavLink' is defined but never used.","'Flex' is defined but never used.","'Box' is defined but never used.","'VStack' is defined but never used.","'useSearchContext' is defined but never used.","React Hook useEffect has a missing dependency: 'pet_id'. Either include it or remove the dependency array.",["543"],"'useAuthContext' is defined but never used.","React Hook useEffect has a missing dependency: 'userLocation'. Either include it or remove the dependency array.",["544"],"'setServerError' is assigned a value but never used.","'Statistics' is defined but never used.","React Hook useEffect has a missing dependency: 'getPets'. Either include it or remove the dependency array.",["545"],["546"],"'FormLabel' is defined but never used.","'ChevronDownIcon' is defined but never used.","'SearchIcon' is defined but never used.","'petStatus' is defined but never used.","'FormNumberField' is defined but never used.","'FormSubmitButtom' is defined but never used.","React Hook useEffect has missing dependencies: 'filterSelection', 'maxHeight', 'maxWeight', 'minHeight', 'minWeight', and 'setFilterSelection'. Either include them or remove the dependency array.",["547"],"'useState' is defined but never used.","'useMediaQuery' is defined but never used.","React Hook useEffect has a missing dependency: 'setFilterSelection'. Either include it or remove the dependency array.",["548"],"'userId' is assigned a value but never used.","'SearchBar' is defined but never used.","'LightModeIcon' is defined but never used.","'useRef' is defined but never used.","'useLayoutEffect' is defined but never used.","'CardHeader' is defined but never used.","'useToast' is defined but never used.","'Button' is defined but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'Tag' is defined but never used.","'TagLabel' is defined but never used.","'TurnedInNotIcon' is defined but never used.","'FavoriteIcon' is defined but never used.","'MoreHorizIcon' is defined but never used.","'BookmarkIcon' is defined but never used.","'Spinner' is defined but never used.","'HeartFilled' is defined but never used.","'useSearchParams' is defined but never used.","'PetActionsFull' is defined but never used.","'adoptionStatus' is assigned a value but never used.","'IconButtonProps' is defined but never used.","'FaSun' is defined but never used.","'Card' is defined but never used.","'ChartElement' is defined but never used.","'useColorMode' is defined but never used.","'TagCloseButton' is defined but never used.","jsx-a11y/aria-proptypes","The value for aria-label must be a string.","JSXAttribute","'InputLeftAddon' is defined but never used.","'InputRightAddon' is defined but never used.","'filters' is assigned a value but never used.","'setIsInputVisible' is assigned a value but never used.","'isSmallerThan750' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllPets'. Either include it or remove the dependency array.",["549"],["550"],"'handleDelete' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useDisclosure' is defined but never used.","'usenae' is defined but never used.","React Hook useMemo has a missing dependency: 'users'. Either include it or remove the dependency array.",["551"],"'Post' is defined but never used.","'Avatar' is defined but never used.","'serverError' is assigned a value but never used.",{"desc":"552","fix":"553"},{"desc":"554","fix":"555"},{"desc":"556","fix":"557"},{"desc":"558","fix":"559"},{"desc":"560","fix":"561"},{"desc":"562","fix":"563"},{"kind":"564","justification":"565"},{"desc":"566","fix":"567"},{"desc":"568","fix":"569"},{"desc":"570","fix":"571"},{"kind":"564","justification":"565"},{"desc":"572","fix":"573"},"Update the dependencies array to be: [toggleAdvancedSearch]",{"range":"574","text":"575"},"Update the dependencies array to be: [getUserLikes]",{"range":"576","text":"577"},"Update the dependencies array to be: [getAllPets, getCurrentUser, petsUserFostered, user_id]",{"range":"578","text":"579"},"Update the dependencies array to be: [pet_id]",{"range":"580","text":"581"},"Update the dependencies array to be: [userLocation]",{"range":"582","text":"583"},"Update the dependencies array to be: [getPets]",{"range":"584","text":"585"},"directive","","Update the dependencies array to be: [filterSelection, maxHeight, maxWeight, minHeight, minWeight, petName, setFilterSelection]",{"range":"586","text":"587"},"Update the dependencies array to be: [typeFilter, adpotionStatusFilter, setFilterSelection]",{"range":"588","text":"589"},"Update the dependencies array to be: [getAllPets]",{"range":"590","text":"591"},"Update the dependencies array to be: [users]",{"range":"592","text":"593"},[1754,1756],"[toggleAdvancedSearch]",[1883,1885],"[getUserLikes]",[1313,1315],"[getAllPets, getCurrentUser, petsUserFostered, user_id]",[991,993],"[pet_id]",[1731,1733],"[userLocation]",[1845,1847],"[getPets]",[1475,1484],"[filterSelection, maxHeight, maxWeight, minHeight, minWeight, petName, setFilterSelection]",[1141,1175],"[typeFilter, adpotionStatusFilter, setFilterSelection]",[691,693],"[getAllPets]",[740,742],"[users]"]