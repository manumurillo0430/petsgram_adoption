{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRouteRegex = getRouteRegex;\nexports.getNamedRouteRegex = getNamedRouteRegex;\nexports.getNamedMiddlewareRegex = getNamedMiddlewareRegex;\nvar _extends = require(\"@swc/helpers/lib/_extends.js\").default;\nvar _escapeRegexp = require(\"../../escape-regexp\");\nvar _removeTrailingSlash = require(\"./remove-trailing-slash\");\n/**\n * Parses a given parameter from a route to a data structure that can be used\n * to generate the parametrized route. Examples:\n *   - `[...slug]` -> `{ name: 'slug', repeat: true, optional: true }`\n *   - `[foo]` -> `{ name: 'foo', repeat: false, optional: true }`\n *   - `bar` -> `{ name: 'bar', repeat: false, optional: false }`\n */\nfunction parseParameter(param) {\n  var optional = param.startsWith('[') && param.endsWith(']');\n  if (optional) {\n    param = param.slice(1, -1);\n  }\n  var repeat = param.startsWith('...');\n  if (repeat) {\n    param = param.slice(3);\n  }\n  return {\n    key: param,\n    repeat: repeat,\n    optional: optional\n  };\n}\nfunction getParametrizedRoute(route) {\n  var segments = (0, _removeTrailingSlash).removeTrailingSlash(route).slice(1).split('/');\n  var groups = {};\n  var groupIndex = 1;\n  return {\n    parameterizedRoute: segments.map(function (segment) {\n      if (segment.startsWith('[') && segment.endsWith(']')) {\n        var _parseParameter = parseParameter(segment.slice(1, -1)),\n          key = _parseParameter.key,\n          optional = _parseParameter.optional,\n          repeat = _parseParameter.repeat;\n        groups[key] = {\n          pos: groupIndex++,\n          repeat: repeat,\n          optional: optional\n        };\n        return repeat ? optional ? '(?:/(.+?))?' : '/(.+?)' : '/([^/]+?)';\n      } else {\n        return \"/\".concat((0, _escapeRegexp).escapeStringRegexp(segment));\n      }\n    }).join(''),\n    groups: groups\n  };\n}\nfunction getRouteRegex(normalizedRoute) {\n  var _getParametrizedRoute = getParametrizedRoute(normalizedRoute),\n    parameterizedRoute = _getParametrizedRoute.parameterizedRoute,\n    groups = _getParametrizedRoute.groups;\n  return {\n    re: new RegExp(\"^\".concat(parameterizedRoute, \"(?:/)?$\")),\n    groups: groups\n  };\n}\n/**\n * Builds a function to generate a minimal routeKey using only a-z and minimal\n * number of characters.\n */\nfunction buildGetSafeRouteKey() {\n  var routeKeyCharCode = 97;\n  var routeKeyCharLength = 1;\n  return function () {\n    var routeKey = '';\n    for (var i = 0; i < routeKeyCharLength; i++) {\n      routeKey += String.fromCharCode(routeKeyCharCode);\n      routeKeyCharCode++;\n      if (routeKeyCharCode > 122) {\n        routeKeyCharLength++;\n        routeKeyCharCode = 97;\n      }\n    }\n    return routeKey;\n  };\n}\nfunction getNamedParametrizedRoute(route) {\n  var segments = (0, _removeTrailingSlash).removeTrailingSlash(route).slice(1).split('/');\n  var getSafeRouteKey = buildGetSafeRouteKey();\n  var routeKeys = {};\n  return {\n    namedParameterizedRoute: segments.map(function (segment) {\n      if (segment.startsWith('[') && segment.endsWith(']')) {\n        var _parseParameter2 = parseParameter(segment.slice(1, -1)),\n          key = _parseParameter2.key,\n          optional = _parseParameter2.optional,\n          repeat = _parseParameter2.repeat;\n        // replace any non-word characters since they can break\n        // the named regex\n        var cleanedKey = key.replace(/\\W/g, '');\n        var invalidKey = false;\n        // check if the key is still invalid and fallback to using a known\n        // safe key\n        if (cleanedKey.length === 0 || cleanedKey.length > 30) {\n          invalidKey = true;\n        }\n        if (!isNaN(parseInt(cleanedKey.slice(0, 1)))) {\n          invalidKey = true;\n        }\n        if (invalidKey) {\n          cleanedKey = getSafeRouteKey();\n        }\n        routeKeys[cleanedKey] = key;\n        return repeat ? optional ? \"(?:/(?<\".concat(cleanedKey, \">.+?))?\") : \"/(?<\".concat(cleanedKey, \">.+?)\") : \"/(?<\".concat(cleanedKey, \">[^/]+?)\");\n      } else {\n        return \"/\".concat((0, _escapeRegexp).escapeStringRegexp(segment));\n      }\n    }).join(''),\n    routeKeys: routeKeys\n  };\n}\nfunction getNamedRouteRegex(normalizedRoute) {\n  var result = getNamedParametrizedRoute(normalizedRoute);\n  return _extends({}, getRouteRegex(normalizedRoute), {\n    namedRegex: \"^\".concat(result.namedParameterizedRoute, \"(?:/)?$\"),\n    routeKeys: result.routeKeys\n  });\n}\nfunction getNamedMiddlewareRegex(normalizedRoute, options) {\n  var _getParametrizedRoute2 = getParametrizedRoute(normalizedRoute),\n    parameterizedRoute = _getParametrizedRoute2.parameterizedRoute;\n  var _options$catchAll = options.catchAll,\n    catchAll = _options$catchAll === void 0 ? true : _options$catchAll;\n  if (parameterizedRoute === '/') {\n    var catchAllRegex = catchAll ? '.*' : '';\n    return {\n      namedRegex: \"^/\".concat(catchAllRegex, \"$\")\n    };\n  }\n  var _getNamedParametrized = getNamedParametrizedRoute(normalizedRoute),\n    namedParameterizedRoute = _getNamedParametrized.namedParameterizedRoute;\n  var catchAllGroupedRegex = catchAll ? '(?:(/.*)?)' : '';\n  return {\n    namedRegex: \"^\".concat(namedParameterizedRoute).concat(catchAllGroupedRegex, \"$\")\n  };\n}","map":{"version":3,"names":["getRouteRegex","getNamedRouteRegex","getNamedMiddlewareRegex","_escapeRegexp","require","_removeTrailingSlash","parseParameter","param","optional","startsWith","endsWith","slice","repeat","key","getParametrizedRoute","route","segments","removeTrailingSlash","split","groups","groupIndex","parameterizedRoute","map","segment","_parseParameter","pos","concat","escapeStringRegexp","join","normalizedRoute","_getParametrizedRoute","re","RegExp","buildGetSafeRouteKey","routeKeyCharCode","routeKeyCharLength","routeKey","i","String","fromCharCode","getNamedParametrizedRoute","getSafeRouteKey","routeKeys","namedParameterizedRoute","_parseParameter2","cleanedKey","replace","invalidKey","length","isNaN","parseInt","result","_extends","namedRegex","options","_getParametrizedRoute2","_options$catchAll","catchAll","catchAllRegex","_getNamedParametrized","catchAllGroupedRegex"],"sources":["../../../../../src/shared/lib/router/utils/route-regex.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}